{
  "hash": "c3e3af519077e9eb0bf836f49b7515fe",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Numpy 和Pandas 基础\n---\n\n\n\n## Numpy 基础\n\n### 创建数组\n有许多种方法创建数组，下面是一些简单的例子，使用`np.array()`函数，将列表、元组转化为数组：\n\n\n::: {#f3435fe9 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\na = np.array([1, 2, 3, 4])\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4]\n```\n:::\n:::\n\n\n注意，与列表不同，Numpy数组只能包含相同类型的数据，下面的例子中，`np.array()`函数自动将列表中的整数转换为浮点数：\n\n::: {#83f75310 .cell execution_count=2}\n``` {.python .cell-code}\nb = np.array([3.14, 4, 2, 3])\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\narray([3.14, 4.  , 2.  , 3.  ])\n```\n:::\n:::\n\n\n列表总是一维的，Numpy数组可以是多维的，例如下面的例子使用：\n\n::: {#c4ead9fd .cell execution_count=3}\n``` {.python .cell-code}\ndata = np.array([[1.5, -0.1, 3],\n                [0, -3, 6.5]])\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1.5 -0.1  3. ]\n [ 0.  -3.   6.5]]\n```\n:::\n:::\n\n\n数组`data`是二维数组，可以查看属性`ndim`和`shape`：\n\n::: {#57ccad19 .cell execution_count=4}\n``` {.python .cell-code}\ndata.ndim\ndata.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(2, 3)\n```\n:::\n:::\n\n\n可以对`data`进行通常的数学运算：\n\n::: {#d63e9e4b .cell execution_count=5}\n``` {.python .cell-code}\nprint(data * 10)\nprint(data + data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 15.  -1.  30.]\n [  0. -30.  65.]]\n[[ 3.  -0.2  6. ]\n [ 0.  -6.  13. ]]\n```\n:::\n:::\n\n\nNumpy也有函数来生成一些特定格式的数组,如表 @tbl-array-creats 所示：\n \n: Numpy中生成数组的函数 {#tbl-array-creats}\n\n| 函数名            | 描述                                                                                      |\n|-------------------|-------------------------------------------------------------------------------------------|\n| `array `            | 将输入数据（列表、元组、数组或其他序列类型）转换为 ndarray，可以自动推断或显式指定数据类型；默认会复制输入数据 |\n| `asarray`           | 将输入转换为 ndarray，如果输入已经是 ndarray，则不会进行复制                              |\n| `arange`            | 类似于内置的 range，但返回的是 ndarray 而不是列表                                         |\n| `ones`, `ones_like`   | 生成给定形状和数据类型的全 1 数组；ones_like 以另一个数组为模板，生成相同形状和数据类型的全 1 数组 |\n| `zeros`, `zeros_like` | 类似于 `ones` 和 `ones_like`，但生成的是全 0 数组                                              |\n| `empty`, `empty_like` | 通过分配新内存创建新数组，但不会像 ones 和 zeros 那样填充值                                |\n| `full`, `full_like`   | 生成给定形状和数据类型的数组，所有值都设置为指定的“填充值”；`full_like` 以另一个数组为模板，生成相同形状和数据类型的填充值数组 |\n| `eye`,` identity`     | 生成单位矩阵（对角线为 1，其余为 0）         \n\n::: {#20be2ef2 .cell execution_count=6}\n``` {.python .cell-code}\nzeros = np.zeros(10)\nprint(zeros)\nones = np.ones((2,3), dtype=float)\nprint(ones)\n# 单位矩阵\nidents = np.identity(3)\nprint(idents)\n\nevens = np.arange(0, 20, 2)\nprint(evens)\ngrids = np.linspace(0, 1, 21)\nprint(grids)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n[[1. 1. 1.]\n [1. 1. 1.]]\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n[ 0  2  4  6  8 10 12 14 16 18]\n[0.   0.05 0.1  0.15 0.2  0.25 0.3  0.35 0.4  0.45 0.5  0.55 0.6  0.65\n 0.7  0.75 0.8  0.85 0.9  0.95 1.  ]\n```\n:::\n:::\n\n\nNumpy中random子库包含丰富的生成随机数的函数，例如：\n\n::: {#f42dbeaa .cell execution_count=7}\n``` {.python .cell-code}\n#生成正态分布\nnums_norm = np.random.normal(loc=0, scale=1, size=(4, 3))\nprint(nums_norm)\nnums_int = np.random.randint(low=1, high=11, size=(2, 10))\nprint(nums_int)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0.44846963 -0.8691623  -0.2255711 ]\n [ 1.59208179  1.25217788 -1.68309807]\n [ 0.26391054 -0.43658427  0.77462679]\n [-0.17047397  1.59207911  1.07267578]]\n[[ 7  6  9  1  7  3 10  2  3  4]\n [ 3  3  3  7  2  6  7  3  8  4]]\n```\n:::\n:::\n\n\n### 数组的索引\n\n注意索引与列表一样，从0开始；选择元素时不包括右侧。\n\n::: {#8ba77069 .cell execution_count=8}\n``` {.python .cell-code}\nz = np.array((1,2,3,4,5))\nz[0]\nz[0:2]\nz[-1]\nz[::2]\nz[::-1]\n# 2D arrays\nz = np.array([[1,2],\n              [3, 4]])\nz[0,0]\nz[0,:]\nz[:,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([2, 4])\n```\n:::\n:::\n\n\n### 数组方法\n\n数组方法众多，例如：\n\n代码段\n\n::: {#e68df20f .cell execution_count=9}\n``` {.python .cell-code}\na = np.array((4,3,2,1))\na.sort()\n\na.sum()\na.mean()\na.max()\na.min()\na.var()\na.std()\na.argmax()\na.cumsum()\na.cumprod()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([ 1,  2,  6, 24])\n```\n:::\n:::\n\n\n### 数组的数学运算\n\n注意，运算符 `+`, `-` , `*`, `/` 和 `**`，都是逐元素运算。例如：\n\n::: {#d2ee7a19 .cell execution_count=10}\n``` {.python .cell-code}\na = np.array([1,2,3,4])\nb = np.array([5,6,7,8])\na + b\na * b\na + 10\na * 10\n# 2D array\nA = np.ones((2,2))\nB = np.ones((2,2))\nA + B\nA+10\nA * B\n(A+1) ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([[4., 4.],\n       [4., 4.]])\n```\n:::\n:::\n\n\n可以使用 @ 或 np.dot() 进行矩阵乘法。如果是向量则计算内积。\n\n::: {#57c4b76f .cell execution_count=11}\n``` {.python .cell-code}\nA = np.array([[1,2],\n              [3,4]])\nB = np.array([[5,6,],\n              [7,8]])\nA@B\n#or\nnp.dot(A,B)\n#\nb = np.array([0, 1])\nA@b\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([2, 4])\n```\n:::\n:::\n\n\n### 例：多项式计算\nNumpy中有一些列简便运算的函数。例如 `np.poly1d()`，多项式求和:\n\n$$p(x) = a_{0} + a_{1}x + a_{2}x^{2} + \\cdots + a_{N}x^{N} = \\sum_{n=0}^{N}a_{n}x^{n} $$\n\n::: {#9e14bb94 .cell execution_count=12}\n``` {.python .cell-code}\np = np.poly1d([1,2,3])\nprint(p)\nprint(p(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   2\n1 x + 2 x + 3\n11\n```\n:::\n:::\n\n\n注意，`np.poly1d()` 函数高阶项在前面。\n\n利用向量计算，自定义一个函数：\n\n::: {#6bb71687 .cell execution_count=13}\n``` {.python .cell-code}\ndef poly1d(x, coef):\n    X = np.ones_like(coef)\n    X[1:] = x\n    y = np.cumprod(X) # y = [1,x,x**2,...]\n    return coef @ y[::-1]\n\ncoef = [1, 2, 3]\npoly1d(2, coef=coef)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nnp.int64(11)\n```\n:::\n:::\n\n\n### Random子库\n\nNumpy中有大量的与随机数生成器有关的函数。\n\n下面是一个例子，注意，没有设定随机种子数，因此每次运行结果会不同。\n\n::: {#d37906d5 .cell execution_count=14}\n``` {.python .cell-code}\nimport numpy as np\n\n# Define an array of choices\nchoices = np.array(['apple', 'banana', 'orange', 'grape', 'kiwi'])\n\n# Perform random choice\nrandom_choice = np.random.choice(choices)\n\n# Print the random choice\nprint(random_choice)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngrape\n```\n:::\n:::\n\n\n#### 例：简单的随机游走\n\n::: {#7c0c1d02 .cell execution_count=15}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 设置随机种子以便复现\nnp.random.seed(0)\n\n# 步数\nn_steps = 1000\n\n# 生成每一步的随机步长（-1 或 1）\nsteps = np.random.choice([-1, 1], size=n_steps)\n\n# 计算随机游走序列\nwalk = np.cumsum(steps)\n\n# 绘制线形图\nplt.plot(walk)\nplt.title('Random Walk')\nplt.xlabel('Step')\nplt.ylabel('Position')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\n#### 例：利用随机数模拟中心极限定理\n\n中心极限定理 (Central Limit Theorem, CLT) 是概率论中一个非常强大的定理。它指出，当从任何形状的总体中抽取足够大的独立同分布 (i.i.d.) 样本时，这些样本均值的分布将近似于正态分布，无论原始总体分布如何。样本量越大，近似程度越好。\n\n我们将通过以下步骤来模拟验证 CLT：\n\n- 选择一个非正态分布的总体: 比如，一个指数分布或均匀分布，它们的形状都不是钟形的。\n- 设置样本参数: 定义每次抽样的样本大小 (sample_size) 和重复抽样的次数 (num_samples)。\n- 重复抽样并计算均值: 从总体中抽取 num_samples 次样本，每次抽取 sample_size 个数据点，并计算每次抽样的平均值。\n- 可视化: 绘制样本均值的直方图，并与原始总体分布的直方图进行对比。\n\n::: {#893087bb .cell execution_count=16}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'SimHei'\nplt.rcParams['axes.unicode_minus'] = False\n\n# --- 1. 设置模拟参数 ---\npopulation_size = 1000000  # 原始总体的大小\nsample_size = 30           # 每次抽样的样本量 (通常大于30就被认为是“大样本”)\nnum_samples = 10000        # 重复抽样的次数，即我们将有多少个样本均值\nnp.random.seed(123)\n\n# --- 2. 选择一个非正态分布的总体 (例如：指数分布) ---\n# 指数分布 (Exponential Distribution) 是一种偏态分布，非常适合验证CLT\n# numpy.random.exponential(scale=1.0, size=None)\n# scale 参数是均值，这里我们设置均值为2.0\npopulation_data = np.random.exponential(scale=2.0, size=population_size)\n# 也可以用均匀分布作为总体进行验证\n# population_data_uniform = np.random.uniform(low=0.0, high=10.0, size=population_size)\n\n# --- 3. 重复抽样并计算均值 ---\nsample_means = []\nfor _ in np.arange(num_samples):\n    # 从总体中随机抽取 sample_size 个数据点\n    sample = np.random.choice(population_data, size=sample_size, replace=True)\n    # 计算样本的均值并添加到列表中\n    sample_means.append(np.mean(sample))\n\n# 将样本均值列表转换为 NumPy 数组，方便后续处理和绘图\nsample_means = np.array(sample_means)\n\n# --- 4. 可视化结果 ---\nplt.figure(figsize=(12, 12))\n\n# 绘制原始总体分布的直方图\nplt.subplot(2, 1, 1) # 1行2列的第一个图\nplt.hist(population_data, bins=50, density=True, color='skyblue', edgecolor='black', alpha=0.7)\nplt.title(f'原始总体分布 (指数分布)\\n均值: {np.mean(population_data):.2f}, 标准差: {np.std(population_data):.2f}')\nplt.xlabel('值')\nplt.ylabel('频率密度')\nplt.grid(True, linestyle='--', alpha=0.6)\n\n# 绘制样本均值分布的直方图\nplt.subplot(2, 1, 2) # 1行2列的第二个图\nplt.hist(sample_means, bins=50, density=True, color='lightcoral', edgecolor='black', alpha=0.7)\nplt.title(f'样本均值的分布 ({sample_size}个样本量，重复{num_samples}次)\\n均值: {np.mean(sample_means):.2f}, 标准差: {np.std(sample_means):.2f}')\nplt.xlabel('样本均值')\nplt.ylabel('频率密度')\nplt.grid(True, linestyle='--', alpha=0.6)\n\nplt.tight_layout() # 调整子图布局，避免重叠\nplt.show()\n\n# --- 5. 额外验证：比较均值和标准差 ---\nprint(\"\\n--- 模拟结果验证 ---\")\nprint(f\"原始总体的均值 (μ): {np.mean(population_data):.4f}\")\nprint(f\"原始总体的标准差 (σ): {np.std(population_data):.4f}\")\nprint(f\"样本均值的均值 (μ_x̄): {np.mean(sample_means):.4f}\")\n# 根据中心极限定理，样本均值的标准差 (标准误差) 应该约等于 总体标准差 / sqrt(样本量)\nexpected_std_of_means = np.std(population_data) / np.sqrt(sample_size)\nprint(f\"样本均值的标准差 (σ_x̄): {np.std(sample_means):.4f}\")\nprint(f\"理论上样本均值的标准差 (σ / sqrt(n)): {expected_std_of_means:.4f}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-17-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n--- 模拟结果验证 ---\n原始总体的均值 (μ): 1.9988\n原始总体的标准差 (σ): 1.9992\n样本均值的均值 (μ_x̄): 1.9984\n样本均值的标准差 (σ_x̄): 0.3653\n理论上样本均值的标准差 (σ / sqrt(n)): 0.3650\n```\n:::\n:::\n\n\n### 通用函数\n\nNumpy中许多函数是通用函数(universal functions)，是一种在 ndarray 数据中进行逐元素操作的函数，大多数数学函数属于此类。\n\n例如 `np.cos()` 函数：\n\n::: {#8f99ecc3 .cell execution_count=17}\n``` {.python .cell-code}\nnp.cos(1.0)\nnp.cos(np.linspace(0, 1, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([1.        , 0.87758256, 0.54030231])\n```\n:::\n:::\n\n\n例如，我们想计算$\\frac{0}{1},\\frac{1}{2},\\cdots, \\frac{4}{5}$:\n\n::: {#6ad12bc4 .cell execution_count=18}\n``` {.python .cell-code}\nnp.arange(5) / np.arange(1, 6)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\narray([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])\n```\n:::\n:::\n\n\n: Numpy中算术运算子和函数 {#tbl-array-operators}\n\n| 运算符 | 对应的 ufunc         | 描述                   | 示例                  |\n|--------|---------------------|------------------------|-----------------------|\n| +      | np.add              | 加法                   | 1 + 1 = 2             |\n| -      | np.subtract         | 减法                   | 3 - 2 = 1             |\n| -      | np.negative         | 一元取反                | -2                    |\n| *      | np.multiply         | 乘法                   | 2 * 3 = 6             |\n| /      | np.divide           | 除法                   | 3 / 2 = 1.5           |\n| //     | np.floor_divide     | 向下取整除法            | 3 // 2 = 1            |\n| **     | np.power            | 幂运算                 | 2 ** 3 = 8            |\n| %      | np.mod              | 取模/余数              | 9 % 4 = 1             |\n\n### 例：通用函数\n\n考察最大化函数 $f(x,y)$ 在区间 $ [−a,a] \\times [−a, a]$ 上的最大值：\n$$\nf(x,y)= \\frac{cos(x^{2} + y^{2})}{1 + x^2 + y^2} \n$$ \n​\n令$a=3$。\n我们定义一个函数，然后生成数组，计算对应的-值，通过栅格（grid）搜索最大值（等于1）。\n\n::: {#bc6fb96d .cell execution_count=19}\n``` {.python .cell-code}\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\nimport matplotlib.pyplot as plt\n\ndef f(x, y):\n    return np.cos(x**2 + y**2) / (1 + x**2 + y**2)\n\ngrid = np.linspace(-3, 3, 50)\nx, y = np.meshgrid(grid, grid)\nz = f(x, y)\n\n# 最大值\nmax_value = np.max(z)\nprint(\"函数的最大值:\", max_value)\n\n# 绘制3D图像\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(x, y, z, cmap='viridis')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('f(x, y)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n函数的最大值: 0.9925310162998334\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-20-output-2.png){}\n:::\n:::\n\n\n图示\n\n### 例：洛伦茨曲线和基尼系数\n\n::: {#19dde8cd .cell execution_count=20}\n``` {.python .cell-code}\nimport numpy as np # 载入numpy库\ndef lorenz_curve(y):\n    n = len(y)\n    y = np.sort(y) # 从小到大排序\n    s = np.zeros(n + 1) # 生成n+1 个数值零\n    s[1:] = np.cumsum(y) # 从第2个数（索引1）累计求和，使第一个数据点为（0，0）\n    cum_people = np.linspace(0, 1, n + 1)\n    cum_income = s / s[n] # s[n]为最后的值，即所有值的和\n    return cum_people, cum_income\n```\n:::\n\n\n::: {#96373b5c .cell execution_count=21}\n``` {.python .cell-code}\nn = 2000\nnp.random.seed(1)\nsample = np.exp(np.random.randn(n))\nf_vals, l_vals = lorenz_curve(sample)\n#\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot(f_vals, l_vals, label=f'lognormal sample', lw = 2)\nax.plot([0, 1], [0, 1], label='equality', lw = 2)\nax.fill_between(f_vals,l_vals, f_vals, alpha=0.06)\nax.fill_between(f_vals, l_vals, np.zeros_like(f_vals),alpha=0.06)\nax.vlines([0.8], [0], [0.43], linestyles='--', colors='gray')\nax.hlines([0.43], [0], [0.8], linestyles='--', colors='gray')\nax.set_xlim((0,1))\nax.set_ylim((0,1))\nax.text(0.55, 0.4,\"A\", fontsize=16)\nax.text(0.75,0.15,\"B\",fontsize=16)\nax.set_xlabel('Cumulative share of people')\nax.set_ylabel('Cumulative share of income')\nax.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\n### 基尼系数\n\n::: {#5c4b2281 .cell execution_count=22}\n``` {.python .cell-code}\ndef gini(y):\n    n = len(y)\n    y_1 = np.reshape(y, (n, 1))\n    y_2 = np.reshape(y, (1, n))\n    g_sum = np.sum(np.abs(y_1 - y_2)) # 利用了numpy的广播（broadcasting）\n    return g_sum / (2 * n * np.sum(y))\n```\n:::\n\n\n::: {#e8b5d7aa .cell execution_count=23}\n``` {.python .cell-code}\n# 模拟对数正态数据\nnp.random.seed(1)\nk = 5\nsigmas = np.linspace(0.2, 4, k)\nn = 2000\nginis = []\nfor sigma in sigmas:\n    mu = -sigma ** 2 / 2\n    y = np.exp(mu + sigma * np.random.randn(n))\n    ginis.append(gini(y))\n```\n:::\n\n\n::: {#255d74eb .cell execution_count=24}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot(sigmas, ginis, marker = 'o',label='simulated', lw = 2)\nax.set_xlabel('Standard deviation')\nax.set_ylabel('Gini coefficient')\nax.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-25-output-1.png){}\n:::\n:::\n\n\n## Pandas 基础\n\nPandas是数据分析最常用的包:\n\n- Pandas 定义了处理数据的结构；\n- 数据处理：读取、调整指数、日期和时间序列、排序、分组、处理缺失值；\n- 一些更复杂的统计功能，如 statsmodels 和 scikit-learn，也是建立在pandas基础上。\n\n### Pandas中的序列和数据框\n\nPandas中两类数据，Series 和 DataFrame；\n\nSeries 基于Numpy数组，支持许多类似运算；\n\nSeries 可以看作一“列”数据；\n\nDataFrame 可以看作储存相应列数据的二维对象；类似Excel表单；\n\nSeries一些方法\n\n::: {#48bf53c5 .cell execution_count=25}\n``` {.python .cell-code}\nimport pandas as pd\nnp.random.seed(123)\ns = pd.Series(np.random.randn(100), name=\"daily return\")\ns.plot();\nnp.abs(s)\ns.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ncount    100.000000\nmean       0.027109\nstd        1.133924\nmin       -2.798589\n25%       -0.832745\n50%       -0.053270\n75%        0.983388\nmax        2.392365\nName: daily return, dtype: float64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-26-output-2.png){}\n:::\n:::\n\n\nDataFrames 是几列数据组成，每一列对应一个变量；\n\n用来方便的处理行和列组织的数据；索引（index）对应行，变量列名（columns）对应列；\n\n可以读取各类软件格式存储数据，csv, excel, stata, html, json,sql等；\n\n\n## 应用：Penn World Table\n\n这一部分应用[Penn World Table](https://www.rug.nl/ggdc/productivity/pwt/)介绍对原始数据的一些常见处理方法。该数据集当前版本为PWT 10.01，包含183个国家1950-2019年的收入、产出、投入和生产率等指标，详细介绍可参见[User Guide to PWT 10.0 data files](https://www.rug.nl/ggdc/docs/pwt100-user-guide-to-data-files.pdf)。数据背后的方法、理论及使用建议，可参见 @feenstra2015next。\n\n网站提供了Stata和Excel格式数据，这里我们下载了后者。数据本身是一个面板数据（Panel Data），“国家 - 年” 唯一识别一个观测值。我们从截面数据入手先只保留2019年数据， 然后再看更复杂的情况。\n\n### 导入数据\n\n假设数据保存在当前路径的datasets子文件中：\n\n::: {#df0cb8c5 .cell execution_count=26}\n``` {.python .cell-code}\nimport pandas as pd\npwt = pd.read_excel(io = \"datasets/pwt1001.xlsx\",\n                header=0,                \n                sheet_name=\"Data\")\n# 保留2019年数据\npwt2019 = pwt[pwt['year'] == 2019].copy().drop(labels='cor_exp',axis=1)\n```\n:::\n\n\n注意其中的几个参数，`io`是文件路径；`header`表明列标题行，这里是第一行；`sheet_name`是数据所在表单名；将载入的数据赋值给pwt数据框。我们只保留2019年的观测值，变量`cor_exp`在这一年全部为缺失值，这里直接删除了。\n\n先为`pwt2019`数据框设置索引变量，这里使用国家名代码变量（countrycode）：\n\n::: {#ae1f3c42 .cell execution_count=27}\n``` {.python .cell-code}\npwt2019.set_index('countrycode', inplace=True)\n```\n:::\n\n\n可以`df.info()`概率数据集，或者使用`df.head()`或`df.tail()`查看头部和尾部观测值：\n\n::: {#653a1d26 .cell execution_count=28}\n``` {.python .cell-code}\npwt2019.info()\npwt2019.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 183 entries, ABW to ZWE\nData columns (total 50 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   country        183 non-null    object \n 1   currency_unit  183 non-null    object \n 2   year           183 non-null    int64  \n 3   rgdpe          183 non-null    float64\n 4   rgdpo          183 non-null    float64\n 5   pop            183 non-null    float64\n 6   emp            177 non-null    float64\n 7   avh            66 non-null     float64\n 8   hc             145 non-null    float64\n 9   ccon           183 non-null    float64\n 10  cda            183 non-null    float64\n 11  cgdpe          183 non-null    float64\n 12  cgdpo          183 non-null    float64\n 13  cn             180 non-null    float64\n 14  ck             137 non-null    float64\n 15  ctfp           118 non-null    float64\n 16  cwtfp          118 non-null    float64\n 17  rgdpna         183 non-null    float64\n 18  rconna         183 non-null    float64\n 19  rdana          183 non-null    float64\n 20  rnna           180 non-null    float64\n 21  rkna           137 non-null    float64\n 22  rtfpna         118 non-null    float64\n 23  rwtfpna        118 non-null    float64\n 24  labsh          138 non-null    float64\n 25  irr            137 non-null    float64\n 26  delta          180 non-null    float64\n 27  xr             183 non-null    float64\n 28  pl_con         183 non-null    float64\n 29  pl_da          183 non-null    float64\n 30  pl_gdpo        183 non-null    float64\n 31  i_cig          183 non-null    object \n 32  i_xm           183 non-null    object \n 33  i_xr           183 non-null    object \n 34  i_outlier      183 non-null    object \n 35  i_irr          137 non-null    object \n 36  statcap        127 non-null    float64\n 37  csh_c          183 non-null    float64\n 38  csh_i          183 non-null    float64\n 39  csh_g          183 non-null    float64\n 40  csh_x          183 non-null    float64\n 41  csh_m          183 non-null    float64\n 42  csh_r          183 non-null    float64\n 43  pl_c           183 non-null    float64\n 44  pl_i           183 non-null    float64\n 45  pl_g           183 non-null    float64\n 46  pl_x           183 non-null    float64\n 47  pl_m           183 non-null    float64\n 48  pl_n           180 non-null    float64\n 49  pl_k           137 non-null    float64\ndtypes: float64(42), int64(1), object(7)\nmemory usage: 72.9+ KB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2019</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3023.694824</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>Kwanza</td>\n      <td>2019</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>NaN</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>438.470032</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>NaN</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>NaN</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n默认显示5条观测值，如果希望看到更多观测值，可以使用 `df.tail(n=10)` 修改数值。\n\n可以应用`.shape, .ndim`,`.columns`等属性查看基本信息，可以看到数据集包含51个变量共183个观测值。\n\n::: {#92bba4f3 .cell execution_count=29}\n``` {.python .cell-code}\nprint(pwt2019.shape)\nprint(pwt2019.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(183, 50)\nIndex(['country', 'currency_unit', 'year', 'rgdpe', 'rgdpo', 'pop', 'emp',\n       'avh', 'hc', 'ccon', 'cda', 'cgdpe', 'cgdpo', 'cn', 'ck', 'ctfp',\n       'cwtfp', 'rgdpna', 'rconna', 'rdana', 'rnna', 'rkna', 'rtfpna',\n       'rwtfpna', 'labsh', 'irr', 'delta', 'xr', 'pl_con', 'pl_da', 'pl_gdpo',\n       'i_cig', 'i_xm', 'i_xr', 'i_outlier', 'i_irr', 'statcap', 'csh_c',\n       'csh_i', 'csh_g', 'csh_x', 'csh_m', 'csh_r', 'pl_c', 'pl_i', 'pl_g',\n       'pl_x', 'pl_m', 'pl_n', 'pl_k'],\n      dtype='object')\n```\n:::\n:::\n\n\n### 选择观测值和变量\n\n应用中经常对某些观测值或特定子集进行操作，因此很重要的一步是选择观测值和变量。\n\n最基本的方法可以通过Python数组的切片（slicing）方式选择特定的**行**。例如，选择第3至5个观测值：\n\n::: {#c13803a3 .cell execution_count=30}\n``` {.python .cell-code}\npwt2019[2:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>438.470032</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>NaN</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>NaN</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n要选择**列**，可以用包含列名字的列表：\n\n::: {#50cfe272 .cell execution_count=31}\n``` {.python .cell-code}\nvars_selected = ['country', 'rgdpe', 'rgdpo', 'pop', 'emp', 'cgdpe', 'cgdpo', 'ctfp' ]\ndf = pwt2019[vars_selected]\n```\n:::\n\n\n#### `.loc`方法\n\n`.loc` 是基于 标签（label-based） 的数据选择方法。这意味着你使用行和列的实际标签名来选择数据，而不是它们的整数位置。\n\n例如，要选择金砖国家（BRICKS）的观测值：\n\n::: {#c2cbb9e1 .cell execution_count=32}\n``` {.python .cell-code}\nbricks = ['CHN', 'BRA', 'RUS', 'IND', 'ZAF']\npwt2019.loc[bricks]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CHN</th>\n      <td>China</td>\n      <td>Yuan Renminbi</td>\n      <td>2019</td>\n      <td>20056066.0</td>\n      <td>2.025766e+07</td>\n      <td>1433.783686</td>\n      <td>798.807739</td>\n      <td>2168.918848</td>\n      <td>2.698987</td>\n      <td>1.056606e+07</td>\n      <td>...</td>\n      <td>0.192402</td>\n      <td>-0.167672</td>\n      <td>-4.100976e-03</td>\n      <td>0.716501</td>\n      <td>0.679048</td>\n      <td>0.865375</td>\n      <td>0.695068</td>\n      <td>0.734048</td>\n      <td>0.457278</td>\n      <td>0.598894</td>\n    </tr>\n    <tr>\n      <th>BRA</th>\n      <td>Brazil</td>\n      <td>Brazilian Real</td>\n      <td>2019</td>\n      <td>3089273.5</td>\n      <td>3.080048e+06</td>\n      <td>211.049527</td>\n      <td>93.956825</td>\n      <td>1707.795058</td>\n      <td>3.091373</td>\n      <td>2.566911e+06</td>\n      <td>...</td>\n      <td>0.132833</td>\n      <td>-0.137775</td>\n      <td>1.377994e-07</td>\n      <td>0.599450</td>\n      <td>0.528862</td>\n      <td>0.663023</td>\n      <td>0.646922</td>\n      <td>0.638165</td>\n      <td>0.355756</td>\n      <td>0.579635</td>\n    </tr>\n    <tr>\n      <th>RUS</th>\n      <td>Russian Federation</td>\n      <td>Russian Ruble</td>\n      <td>2019</td>\n      <td>4197222.5</td>\n      <td>4.161194e+06</td>\n      <td>145.872256</td>\n      <td>71.670639</td>\n      <td>1965.000000</td>\n      <td>3.434408</td>\n      <td>3.170826e+06</td>\n      <td>...</td>\n      <td>0.178951</td>\n      <td>-0.086548</td>\n      <td>-2.315040e-02</td>\n      <td>0.411263</td>\n      <td>0.573736</td>\n      <td>0.281037</td>\n      <td>0.576825</td>\n      <td>0.690811</td>\n      <td>0.466877</td>\n      <td>0.366449</td>\n    </tr>\n    <tr>\n      <th>IND</th>\n      <td>India</td>\n      <td>Indian Rupee</td>\n      <td>2019</td>\n      <td>8945547.0</td>\n      <td>9.170555e+06</td>\n      <td>1366.417754</td>\n      <td>497.615723</td>\n      <td>2122.940682</td>\n      <td>2.171165</td>\n      <td>6.608024e+06</td>\n      <td>...</td>\n      <td>0.051035</td>\n      <td>-0.077878</td>\n      <td>3.370060e-02</td>\n      <td>0.294905</td>\n      <td>0.356979</td>\n      <td>0.471800</td>\n      <td>0.692824</td>\n      <td>0.672622</td>\n      <td>0.210450</td>\n      <td>0.395132</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>Rand</td>\n      <td>2019</td>\n      <td>748940.0</td>\n      <td>7.340944e+05</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>2191.363362</td>\n      <td>2.908202</td>\n      <td>6.236696e+05</td>\n      <td>...</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n      <td>0.315006</td>\n      <td>0.525546</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n或者选择列：\n\n::: {#eeae56f2 .cell execution_count=33}\n``` {.python .cell-code}\nvariables = ['country', 'rgdpe', 'pop']\npwt2019.loc[:, variables]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>rgdpe</th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>3921.261230</td>\n      <td>0.106314</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>228151.015625</td>\n      <td>31.825295</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>376.634979</td>\n      <td>0.014869</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>35890.019531</td>\n      <td>2.880917</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>681525.812500</td>\n      <td>9.770529</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>750726.750000</td>\n      <td>96.462106</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>50052.933594</td>\n      <td>29.161922</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>748940.000000</td>\n      <td>58.558270</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>57956.183594</td>\n      <td>17.861030</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>42296.062500</td>\n      <td>14.645468</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n或者同时指定行和列：\n\n::: {#3af03a5d .cell execution_count=34}\n``` {.python .cell-code}\npwt2019.loc[bricks, variables]\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>rgdpe</th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CHN</th>\n      <td>China</td>\n      <td>20056066.0</td>\n      <td>1433.783686</td>\n    </tr>\n    <tr>\n      <th>BRA</th>\n      <td>Brazil</td>\n      <td>3089273.5</td>\n      <td>211.049527</td>\n    </tr>\n    <tr>\n      <th>RUS</th>\n      <td>Russian Federation</td>\n      <td>4197222.5</td>\n      <td>145.872256</td>\n    </tr>\n    <tr>\n      <th>IND</th>\n      <td>India</td>\n      <td>8945547.0</td>\n      <td>1366.417754</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>748940.0</td>\n      <td>58.558270</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### `.iloc`方法\n\n相应的，`.iloc` 是基于整数位置（integer-location based）的，使用行和列的整数位置（从 0 开始）来选择数据。例如：\n\n::: {#4bb2e20e .cell execution_count=35}\n``` {.python .cell-code}\n# 选择第2行数据（索引位置为1）\npwt2019.iloc[1]\n# 选择第1行（索引为0）、第3行（索引为2）和第5行（索引为4）\npwt2019.iloc[[0, 2, 4]]\n# 选择前5行、第4至第6列观测值\npwt2019.iloc[:5, 3:6]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n这里需要注意Python中索引位置。Python中进行切片（slicing）操作时，语法通常类似 `[start:end]`，要注意：\n\n- `start`：切片的起始索引，对应的元素会被包含。\n- `end`：切片的结束索引，对应的元素不会被包含。\n  \n#### 根据条件筛选\n\n除了根据索引或位置选择数据外，也可以利用条件来筛选观测值。例如，根据人口变量（`pop`，单位：百万）选择2019年总人口超过2亿的观测值：\n\n::: {#003aba1a .cell execution_count=36}\n``` {.python .cell-code}\npwt2019[pwt2019['pop'] >= 200]\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BRA</th>\n      <td>Brazil</td>\n      <td>Brazilian Real</td>\n      <td>2019</td>\n      <td>3.089274e+06</td>\n      <td>3.080048e+06</td>\n      <td>211.049527</td>\n      <td>93.956825</td>\n      <td>1707.795058</td>\n      <td>3.091373</td>\n      <td>2.566911e+06</td>\n      <td>...</td>\n      <td>0.132833</td>\n      <td>-0.137775</td>\n      <td>1.377994e-07</td>\n      <td>0.599450</td>\n      <td>0.528862</td>\n      <td>0.663023</td>\n      <td>0.646922</td>\n      <td>0.638165</td>\n      <td>0.355756</td>\n      <td>0.579635</td>\n    </tr>\n    <tr>\n      <th>CHN</th>\n      <td>China</td>\n      <td>Yuan Renminbi</td>\n      <td>2019</td>\n      <td>2.005607e+07</td>\n      <td>2.025766e+07</td>\n      <td>1433.783686</td>\n      <td>798.807739</td>\n      <td>2168.918848</td>\n      <td>2.698987</td>\n      <td>1.056606e+07</td>\n      <td>...</td>\n      <td>0.192402</td>\n      <td>-0.167672</td>\n      <td>-4.100976e-03</td>\n      <td>0.716501</td>\n      <td>0.679048</td>\n      <td>0.865375</td>\n      <td>0.695068</td>\n      <td>0.734048</td>\n      <td>0.457278</td>\n      <td>0.598894</td>\n    </tr>\n    <tr>\n      <th>IDN</th>\n      <td>Indonesia</td>\n      <td>Rupiah</td>\n      <td>2019</td>\n      <td>3.104439e+06</td>\n      <td>3.137931e+06</td>\n      <td>270.625568</td>\n      <td>131.170685</td>\n      <td>2019.923395</td>\n      <td>2.288165</td>\n      <td>2.051190e+06</td>\n      <td>...</td>\n      <td>0.089377</td>\n      <td>-0.081947</td>\n      <td>-1.223290e-03</td>\n      <td>0.377086</td>\n      <td>0.359957</td>\n      <td>0.295082</td>\n      <td>0.601248</td>\n      <td>0.669811</td>\n      <td>0.215823</td>\n      <td>0.387587</td>\n    </tr>\n    <tr>\n      <th>IND</th>\n      <td>India</td>\n      <td>Indian Rupee</td>\n      <td>2019</td>\n      <td>8.945547e+06</td>\n      <td>9.170555e+06</td>\n      <td>1366.417754</td>\n      <td>497.615723</td>\n      <td>2122.940682</td>\n      <td>2.171165</td>\n      <td>6.608024e+06</td>\n      <td>...</td>\n      <td>0.051035</td>\n      <td>-0.077878</td>\n      <td>3.370060e-02</td>\n      <td>0.294905</td>\n      <td>0.356979</td>\n      <td>0.471800</td>\n      <td>0.692824</td>\n      <td>0.672622</td>\n      <td>0.210450</td>\n      <td>0.395132</td>\n    </tr>\n    <tr>\n      <th>NGA</th>\n      <td>Nigeria</td>\n      <td>Naira</td>\n      <td>2019</td>\n      <td>9.834982e+05</td>\n      <td>1.001537e+06</td>\n      <td>200.963599</td>\n      <td>73.020554</td>\n      <td>NaN</td>\n      <td>1.974245</td>\n      <td>9.300954e+05</td>\n      <td>...</td>\n      <td>0.106134</td>\n      <td>-0.078965</td>\n      <td>-6.898887e-02</td>\n      <td>0.418511</td>\n      <td>1.166929</td>\n      <td>0.288400</td>\n      <td>0.507703</td>\n      <td>0.602859</td>\n      <td>0.788816</td>\n      <td>0.920094</td>\n    </tr>\n    <tr>\n      <th>PAK</th>\n      <td>Pakistan</td>\n      <td>Pakistan Rupee</td>\n      <td>2019</td>\n      <td>1.036800e+06</td>\n      <td>1.088502e+06</td>\n      <td>216.565318</td>\n      <td>63.085052</td>\n      <td>1966.907180</td>\n      <td>1.770760</td>\n      <td>1.023950e+06</td>\n      <td>...</td>\n      <td>0.040008</td>\n      <td>-0.087298</td>\n      <td>-2.582011e-14</td>\n      <td>0.231672</td>\n      <td>0.340412</td>\n      <td>0.287822</td>\n      <td>0.571041</td>\n      <td>0.537927</td>\n      <td>0.205466</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>USA</th>\n      <td>United States</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>2.086051e+07</td>\n      <td>2.059584e+07</td>\n      <td>329.064917</td>\n      <td>158.299591</td>\n      <td>1765.346390</td>\n      <td>3.749341</td>\n      <td>1.682624e+07</td>\n      <td>...</td>\n      <td>0.111490</td>\n      <td>-0.165832</td>\n      <td>1.459136e-02</td>\n      <td>1.005707</td>\n      <td>0.988310</td>\n      <td>1.266850</td>\n      <td>0.717118</td>\n      <td>0.752818</td>\n      <td>1.069356</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>7 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n注意，`pwt2019['pop'] >= 200` 的结果是一列布林值，然后`pwt2019[]`选择返回取值为`True`的观测值。\n\n再例如，下面的代码包含了两个条件：\n\n- 国家名属于金砖国家。注意这里使用了Pandas 中的`df.isin()`函数；\n- 2019年人口超过10亿。\n  \n当有不止一个条件时，我们用`&`, `|`表示`and` 和 `or`运算符；\n\n::: {#b4434f42 .cell execution_count=37}\n``` {.python .cell-code}\nBRICKS = ['China','Brazil',  ' Russian Federation', 'India', 'South Africa']\n#\npwt2019[(pwt2019['country'].isin(BRICKS)) & (pwt2019['pop'] > 1000)]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CHN</th>\n      <td>China</td>\n      <td>Yuan Renminbi</td>\n      <td>2019</td>\n      <td>20056066.0</td>\n      <td>20257660.0</td>\n      <td>1433.783686</td>\n      <td>798.807739</td>\n      <td>2168.918848</td>\n      <td>2.698987</td>\n      <td>10566063.0</td>\n      <td>...</td>\n      <td>0.192402</td>\n      <td>-0.167672</td>\n      <td>-0.004101</td>\n      <td>0.716501</td>\n      <td>0.679048</td>\n      <td>0.865375</td>\n      <td>0.695068</td>\n      <td>0.734048</td>\n      <td>0.457278</td>\n      <td>0.598894</td>\n    </tr>\n    <tr>\n      <th>IND</th>\n      <td>India</td>\n      <td>Indian Rupee</td>\n      <td>2019</td>\n      <td>8945547.0</td>\n      <td>9170555.0</td>\n      <td>1366.417754</td>\n      <td>497.615723</td>\n      <td>2122.940682</td>\n      <td>2.171165</td>\n      <td>6608023.5</td>\n      <td>...</td>\n      <td>0.051035</td>\n      <td>-0.077878</td>\n      <td>0.033701</td>\n      <td>0.294905</td>\n      <td>0.356979</td>\n      <td>0.471800</td>\n      <td>0.692824</td>\n      <td>0.672622</td>\n      <td>0.210450</td>\n      <td>0.395132</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n更复杂的情况，可以在条件语句中加入数学表达式。例如，下面的代码筛选了人均实际GDP超过2万美元和人口超过5000万的国家的观测值，这里人均实际GDP是购买力平价调整后支出法衡量的实际GDP与人口的比值：\n\n::: {#c8e953b7 .cell execution_count=38}\n``` {.python .cell-code}\npwt2019[(pwt2019['rgdpe']/pwt2019['pop'] > 20000) & (pwt2019['pop'] > 50)]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>DEU</th>\n      <td>Germany</td>\n      <td>Euro</td>\n      <td>2019</td>\n      <td>4.308862e+06</td>\n      <td>4275312.00</td>\n      <td>83.517045</td>\n      <td>44.795197</td>\n      <td>1386.196834</td>\n      <td>3.675378</td>\n      <td>3.078229e+06</td>\n      <td>...</td>\n      <td>0.603715</td>\n      <td>-0.550977</td>\n      <td>0.000000</td>\n      <td>0.881662</td>\n      <td>0.850929</td>\n      <td>1.006024</td>\n      <td>0.701677</td>\n      <td>0.673799</td>\n      <td>0.822418</td>\n      <td>0.651490</td>\n    </tr>\n    <tr>\n      <th>FRA</th>\n      <td>France</td>\n      <td>Euro</td>\n      <td>2019</td>\n      <td>3.018885e+06</td>\n      <td>2946958.25</td>\n      <td>67.351247</td>\n      <td>28.532564</td>\n      <td>1504.912353</td>\n      <td>3.230137</td>\n      <td>2.233350e+06</td>\n      <td>...</td>\n      <td>0.274841</td>\n      <td>-0.327385</td>\n      <td>0.022188</td>\n      <td>0.913003</td>\n      <td>0.813518</td>\n      <td>0.987091</td>\n      <td>0.686175</td>\n      <td>0.665962</td>\n      <td>0.716193</td>\n      <td>0.576515</td>\n    </tr>\n    <tr>\n      <th>GBR</th>\n      <td>United Kingdom</td>\n      <td>Pound Sterling</td>\n      <td>2019</td>\n      <td>3.118991e+06</td>\n      <td>2989895.50</td>\n      <td>67.530172</td>\n      <td>32.982498</td>\n      <td>1667.947711</td>\n      <td>3.773596</td>\n      <td>2.414706e+06</td>\n      <td>...</td>\n      <td>0.227445</td>\n      <td>-0.346071</td>\n      <td>0.065275</td>\n      <td>0.992262</td>\n      <td>0.699868</td>\n      <td>0.912168</td>\n      <td>0.687633</td>\n      <td>0.668252</td>\n      <td>0.624869</td>\n      <td>0.796017</td>\n    </tr>\n    <tr>\n      <th>ITA</th>\n      <td>Italy</td>\n      <td>Euro</td>\n      <td>2019</td>\n      <td>2.508404e+06</td>\n      <td>2466327.50</td>\n      <td>60.550075</td>\n      <td>25.596329</td>\n      <td>1717.833818</td>\n      <td>3.158385</td>\n      <td>1.810091e+06</td>\n      <td>...</td>\n      <td>0.307117</td>\n      <td>-0.292341</td>\n      <td>0.001006</td>\n      <td>0.846609</td>\n      <td>0.590234</td>\n      <td>0.969897</td>\n      <td>0.704260</td>\n      <td>0.657741</td>\n      <td>0.471262</td>\n      <td>0.585280</td>\n    </tr>\n    <tr>\n      <th>JPN</th>\n      <td>Japan</td>\n      <td>Yen</td>\n      <td>2019</td>\n      <td>5.028348e+06</td>\n      <td>5036891.00</td>\n      <td>126.860301</td>\n      <td>69.976692</td>\n      <td>1691.085260</td>\n      <td>3.593987</td>\n      <td>3.765120e+06</td>\n      <td>...</td>\n      <td>0.190841</td>\n      <td>-0.190701</td>\n      <td>0.005592</td>\n      <td>1.048585</td>\n      <td>1.007949</td>\n      <td>0.932528</td>\n      <td>0.734816</td>\n      <td>0.751225</td>\n      <td>1.011635</td>\n      <td>0.788685</td>\n    </tr>\n    <tr>\n      <th>KOR</th>\n      <td>Republic of Korea</td>\n      <td>Won</td>\n      <td>2019</td>\n      <td>2.090946e+06</td>\n      <td>2162705.25</td>\n      <td>51.225308</td>\n      <td>26.798534</td>\n      <td>1979.526258</td>\n      <td>3.765123</td>\n      <td>1.314779e+06</td>\n      <td>...</td>\n      <td>0.466232</td>\n      <td>-0.403080</td>\n      <td>0.000459</td>\n      <td>0.848224</td>\n      <td>0.732208</td>\n      <td>0.758751</td>\n      <td>0.654067</td>\n      <td>0.701660</td>\n      <td>0.557140</td>\n      <td>0.657925</td>\n    </tr>\n    <tr>\n      <th>RUS</th>\n      <td>Russian Federation</td>\n      <td>Russian Ruble</td>\n      <td>2019</td>\n      <td>4.197222e+06</td>\n      <td>4161194.50</td>\n      <td>145.872256</td>\n      <td>71.670639</td>\n      <td>1965.000000</td>\n      <td>3.434408</td>\n      <td>3.170826e+06</td>\n      <td>...</td>\n      <td>0.178951</td>\n      <td>-0.086548</td>\n      <td>-0.023150</td>\n      <td>0.411263</td>\n      <td>0.573736</td>\n      <td>0.281037</td>\n      <td>0.576825</td>\n      <td>0.690811</td>\n      <td>0.466877</td>\n      <td>0.366449</td>\n    </tr>\n    <tr>\n      <th>TUR</th>\n      <td>Turkey</td>\n      <td>New Turkish Lira</td>\n      <td>2019</td>\n      <td>2.227538e+06</td>\n      <td>2248225.75</td>\n      <td>83.429615</td>\n      <td>28.087334</td>\n      <td>1832.000000</td>\n      <td>2.514292</td>\n      <td>1.555716e+06</td>\n      <td>...</td>\n      <td>0.119963</td>\n      <td>-0.147055</td>\n      <td>0.066752</td>\n      <td>0.393921</td>\n      <td>0.313990</td>\n      <td>0.259054</td>\n      <td>0.671110</td>\n      <td>0.636799</td>\n      <td>0.207867</td>\n      <td>0.477120</td>\n    </tr>\n    <tr>\n      <th>USA</th>\n      <td>United States</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>2.086051e+07</td>\n      <td>20595844.00</td>\n      <td>329.064917</td>\n      <td>158.299591</td>\n      <td>1765.346390</td>\n      <td>3.749341</td>\n      <td>1.682624e+07</td>\n      <td>...</td>\n      <td>0.111490</td>\n      <td>-0.165832</td>\n      <td>0.014591</td>\n      <td>1.005707</td>\n      <td>0.988310</td>\n      <td>1.266850</td>\n      <td>0.717118</td>\n      <td>0.752818</td>\n      <td>1.069356</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>9 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n### apply 方法\n\nPandas中一个广泛应用的方法是 `df.apply()`，它将一个函数应用到每一行/列，返回一个序列；\n\n函数可以是内嵌的（built in）也可以是自定义的，例如，计算每一列的最大值，为了节省输出空间，使用子集`df`数据框：\n\n::: {#998dc762 .cell execution_count=39}\n``` {.python .cell-code}\ndf.apply(np.max, axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ncountry       Zimbabwe\nrgdpe       20860506.0\nrgdpo       20595844.0\npop        1433.783686\nemp         798.807739\ncgdpe       20791364.0\ncgdpo       20566034.0\nctfp          1.276913\ndtype: object\n```\n:::\n:::\n\n\n或者，自定义一个函数`range(x)`计算极差：\n\n::: {#a1aa4669 .cell execution_count=40}\n``` {.python .cell-code}\nimport numpy as np\ndef range(x):\n    return np.max(x) - np.min(x)\ndf.select_dtypes(np.number).apply(range)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nrgdpe    2.086041e+07\nrgdpo    2.059577e+07\npop      1.433779e+03\nemp      7.988052e+02\ncgdpe    2.079126e+07\ncgdpo    2.056595e+07\nctfp     1.222178e+00\ndtype: float64\n```\n:::\n:::\n\n\n再例如，归一化（normalization）经常使用minmax方法：\n$$\nY = \\frac{X_{i} - \\min(X_{i})}{\\max(X_{i}) - \\min(X_{i})}\n$$\n\n我们定义一个函数`minmax()`，然后应用`apply()`方法：\n\n::: {#22e750de .cell execution_count=41}\n``` {.python .cell-code}\ndef minmax(S):\n    return (S-S.min())/(S.max() - S.min())\npwt2019[['pop','rgdpe', 'emp']].apply(minmax)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pop</th>\n      <th>rgdpe</th>\n      <th>emp</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>0.000071</td>\n      <td>0.000183</td>\n      <td>0.000056</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>0.022193</td>\n      <td>0.010932</td>\n      <td>0.020834</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>0.000007</td>\n      <td>0.000013</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>0.002006</td>\n      <td>0.001716</td>\n      <td>0.001344</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>0.006811</td>\n      <td>0.032666</td>\n      <td>0.007269</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>0.067275</td>\n      <td>0.035983</td>\n      <td>0.063091</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>0.020336</td>\n      <td>0.002395</td>\n      <td>0.006922</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>0.040838</td>\n      <td>0.035898</td>\n      <td>0.023335</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>0.012454</td>\n      <td>0.002774</td>\n      <td>0.006538</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>0.010211</td>\n      <td>0.002023</td>\n      <td>0.008548</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n经常将`lambda`函数方法与`df.apply()`方法相结合。例如，数据集中有4个指标度量GDP，分别是`['rgdpe', 'rgdpo','cgdpe','cgdpo']`，假设我们希望计算一个加权平均数，权重为（0.3，0.2，0.3，0.2）：\n\n::: {#4e13f967 .cell execution_count=42}\n``` {.python .cell-code}\nvariables = ['rgdpe', 'rgdpo','cgdpe','cgdpo']\ndf[variables].apply(lambda row:\n    row['rgdpe']*0.3 + row['rgdpo']*0.2 + row['cgdpe']*0.3 + row['cgdpo']*0.2,\n    axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ncountrycode\nABW      3736.787085\nAGO    227005.793750\nAIA       318.944440\nALB     35987.783203\nARE    664187.912500\n           ...      \nVNM    739027.362500\nYEM     50759.290625\nZAF    742988.068750\nZMB     57414.339062\nZWE     41768.012500\nLength: 183, dtype: float64\n```\n:::\n:::\n\n\n注意，z选项`axis = 1` ，将函数应用至每一行，默认值为0。\n\n\n### 检测和处理缺失值\n\nPandas中最常用的缺失值表示是`NaN`（Not a Number）。可以使用`isnull()`或`isna()`函数检测缺失值，返回一个布尔型的DataFrame，其中`True`表示缺失值：\n\n::: {#553a3184 .cell execution_count=43}\n``` {.python .cell-code}\npwt2019.isna()\n#pwt2019.isnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n下面的的代码计算了缺失值的数量，将其除以样本容量得到缺失值比例，然后按照降序排序，并将比例最高的前15个变量绘制柱形图：\n\n::: {#cf84a899 .cell execution_count=44}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(8, 6))\n(pwt2019.isna().sum()/pwt2019.shape[0]*100).sort_values(ascending=False)[:15].plot(kind='bar', ax=ax)\nax.set_ylabel(\"%\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-45-output-1.png){}\n:::\n:::\n\n\n另一种图示的方法是类似矩阵绘图的方式，将缺失值标记出来，`missingno`库有简单的命令实现：\n\n::: {#7f4232ed .cell execution_count=45}\n``` {.python .cell-code}\nimport missingno as msno\nplt.figure(figsize=(12, 6))\nmsno.matrix(pwt2019)\nplt.title(\"Missing Values Matrix\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1152x576 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-46-output-2.png){}\n:::\n:::\n\n\n**删除缺失值**\n\n处理缺失值的方法有很多种，选择哪种方法取决于你的数据特性、缺失原因以及分析目标。最直接的方法是使用`df.dropna()`函数删除包含缺失值的行或列：\n\n::: {#fb3197cb .cell execution_count=46}\n``` {.python .cell-code}\n# 删除含缺失值的行\npwt2019.dropna()\n# 删除含缺失值的列\npwt2019.dropna(axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>cgdpe</th>\n      <th>cgdpo</th>\n      <th>...</th>\n      <th>csh_i</th>\n      <th>csh_g</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2019</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>3023.694824</td>\n      <td>3877.659668</td>\n      <td>3912.334717</td>\n      <td>3466.241943</td>\n      <td>...</td>\n      <td>0.246366</td>\n      <td>0.214084</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>Kwanza</td>\n      <td>2019</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>155943.718750</td>\n      <td>198750.421875</td>\n      <td>227771.609375</td>\n      <td>223289.312500</td>\n      <td>...</td>\n      <td>0.191710</td>\n      <td>0.199723</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>438.470032</td>\n      <td>509.044983</td>\n      <td>375.136444</td>\n      <td>241.384537</td>\n      <td>...</td>\n      <td>0.292376</td>\n      <td>0.303098</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>33399.167969</td>\n      <td>40868.316406</td>\n      <td>35808.343750</td>\n      <td>36288.328125</td>\n      <td>...</td>\n      <td>0.205828</td>\n      <td>0.206071</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>306771.156250</td>\n      <td>515623.312500</td>\n      <td>678241.187500</td>\n      <td>635332.812500</td>\n      <td>...</td>\n      <td>0.328729</td>\n      <td>0.127105</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>2019</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>582677.062500</td>\n      <td>758821.937500</td>\n      <td>747853.750000</td>\n      <td>723142.687500</td>\n      <td>...</td>\n      <td>0.243582</td>\n      <td>0.095490</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-5.730492e-02</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>Yemeni Rial</td>\n      <td>2019</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>49266.472656</td>\n      <td>67992.531250</td>\n      <td>49937.042969</td>\n      <td>51983.429688</td>\n      <td>...</td>\n      <td>0.360231</td>\n      <td>0.300234</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-1.733917e-01</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>Rand</td>\n      <td>2019</td>\n      <td>748940.000000</td>\n      <td>734094.375000</td>\n      <td>58.558270</td>\n      <td>623669.562500</td>\n      <td>741675.937500</td>\n      <td>748245.937500</td>\n      <td>735067.062500</td>\n      <td>...</td>\n      <td>0.160538</td>\n      <td>0.227329</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>Kwacha</td>\n      <td>2019</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>38698.402344</td>\n      <td>56536.863281</td>\n      <td>57695.066406</td>\n      <td>56811.105469</td>\n      <td>...</td>\n      <td>0.313996</td>\n      <td>0.171331</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>2.839118e-02</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>42325.117188</td>\n      <td>41081.722656</td>\n      <td>...</td>\n      <td>0.077089</td>\n      <td>0.227109</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-8.979837e-02</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n另外，上面的命令并没有改变原数据框，可以通过赋值方式保存。或者加上选项`df.dropna(inplace=True)`，即在原数据框中生效。\n\n**填充**\n\n`df.fillna()`是用于填充缺失值的核心函数。\n\n::: {#7868786f .cell execution_count=47}\n``` {.python .cell-code}\n#\npwt2019.fillna(0)\n#\npwt2019.select_dtypes(np.number).fillna(0).combine_first(pwt2019)\npwt2019.select_dtypes(np.number).fillna(pwt2019.mean(numeric_only=True)).combine_first(pwt2019)\npwt2019.select_dtypes(np.number).fillna(pwt2019.median(numeric_only=True)).combine_first(pwt2019)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>avh</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>cgdpe</th>\n      <th>cgdpo</th>\n      <th>ck</th>\n      <th>cn</th>\n      <th>country</th>\n      <th>csh_c</th>\n      <th>csh_g</th>\n      <th>...</th>\n      <th>rgdpe</th>\n      <th>rgdpna</th>\n      <th>rgdpo</th>\n      <th>rkna</th>\n      <th>rnna</th>\n      <th>rtfpna</th>\n      <th>rwtfpna</th>\n      <th>statcap</th>\n      <th>xr</th>\n      <th>year</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>1818.281597</td>\n      <td>3023.694824</td>\n      <td>3877.659668</td>\n      <td>3912.334717</td>\n      <td>3466.241943</td>\n      <td>0.000209</td>\n      <td>1.742797e+04</td>\n      <td>Aruba</td>\n      <td>0.658242</td>\n      <td>0.214084</td>\n      <td>...</td>\n      <td>3921.261230</td>\n      <td>3068.758301</td>\n      <td>3467.299561</td>\n      <td>1.032467</td>\n      <td>1.739027e+04</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>67.777800</td>\n      <td>1.790000</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>1818.281597</td>\n      <td>155943.718750</td>\n      <td>198750.421875</td>\n      <td>227771.609375</td>\n      <td>223289.312500</td>\n      <td>0.016624</td>\n      <td>1.299232e+06</td>\n      <td>Angola</td>\n      <td>0.498670</td>\n      <td>0.199723</td>\n      <td>...</td>\n      <td>228151.015625</td>\n      <td>222151.062500</td>\n      <td>227855.718750</td>\n      <td>1.005457</td>\n      <td>1.300951e+06</td>\n      <td>0.936524</td>\n      <td>0.916698</td>\n      <td>48.888900</td>\n      <td>364.825805</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>1818.281597</td>\n      <td>438.470032</td>\n      <td>509.044983</td>\n      <td>375.136444</td>\n      <td>241.384537</td>\n      <td>0.005160</td>\n      <td>2.266816e+03</td>\n      <td>Anguilla</td>\n      <td>1.513381</td>\n      <td>0.303098</td>\n      <td>...</td>\n      <td>376.634979</td>\n      <td>223.456711</td>\n      <td>225.680527</td>\n      <td>1.068386</td>\n      <td>2.260053e+03</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>67.777800</td>\n      <td>2.700000</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>1818.281597</td>\n      <td>33399.167969</td>\n      <td>40868.316406</td>\n      <td>35808.343750</td>\n      <td>36288.328125</td>\n      <td>0.005160</td>\n      <td>2.239714e+05</td>\n      <td>Albania</td>\n      <td>0.714312</td>\n      <td>0.206071</td>\n      <td>...</td>\n      <td>35890.019531</td>\n      <td>37204.773438</td>\n      <td>36103.042969</td>\n      <td>1.068386</td>\n      <td>2.226235e+05</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>78.888900</td>\n      <td>109.850833</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>1818.281597</td>\n      <td>306771.156250</td>\n      <td>515623.312500</td>\n      <td>678241.187500</td>\n      <td>635332.812500</td>\n      <td>0.005160</td>\n      <td>4.453746e+06</td>\n      <td>United Arab Emirates</td>\n      <td>0.355746</td>\n      <td>0.127105</td>\n      <td>...</td>\n      <td>681525.812500</td>\n      <td>647986.250000</td>\n      <td>645956.250000</td>\n      <td>1.068386</td>\n      <td>4.454460e+06</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>67.777800</td>\n      <td>3.672500</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>2131.968232</td>\n      <td>582677.062500</td>\n      <td>758821.937500</td>\n      <td>747853.750000</td>\n      <td>723142.687500</td>\n      <td>0.005160</td>\n      <td>1.962286e+06</td>\n      <td>Viet Nam</td>\n      <td>0.710267</td>\n      <td>0.095490</td>\n      <td>...</td>\n      <td>750726.750000</td>\n      <td>741653.562500</td>\n      <td>724123.375000</td>\n      <td>1.068386</td>\n      <td>1.964750e+06</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>78.888900</td>\n      <td>23050.241667</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>1818.281597</td>\n      <td>49266.472656</td>\n      <td>67992.531250</td>\n      <td>49937.042969</td>\n      <td>51983.429688</td>\n      <td>0.005160</td>\n      <td>5.312318e+05</td>\n      <td>Yemen</td>\n      <td>0.647500</td>\n      <td>0.300234</td>\n      <td>...</td>\n      <td>50052.933594</td>\n      <td>40069.593750</td>\n      <td>51828.058594</td>\n      <td>1.068386</td>\n      <td>5.404372e+05</td>\n      <td>0.995869</td>\n      <td>1.000326</td>\n      <td>38.888867</td>\n      <td>250.250000</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>2191.363362</td>\n      <td>623669.562500</td>\n      <td>741675.937500</td>\n      <td>748245.937500</td>\n      <td>735067.062500</td>\n      <td>0.033228</td>\n      <td>2.816883e+06</td>\n      <td>South Africa</td>\n      <td>0.621124</td>\n      <td>0.227329</td>\n      <td>...</td>\n      <td>748940.000000</td>\n      <td>732851.625000</td>\n      <td>734094.375000</td>\n      <td>1.036546</td>\n      <td>2.811258e+06</td>\n      <td>0.965773</td>\n      <td>0.972355</td>\n      <td>75.555567</td>\n      <td>14.448427</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>1818.281597</td>\n      <td>38698.402344</td>\n      <td>56536.863281</td>\n      <td>57695.066406</td>\n      <td>56811.105469</td>\n      <td>0.004523</td>\n      <td>2.841112e+05</td>\n      <td>Zambia</td>\n      <td>0.509846</td>\n      <td>0.171331</td>\n      <td>...</td>\n      <td>57956.183594</td>\n      <td>56282.273438</td>\n      <td>56783.714844</td>\n      <td>1.117712</td>\n      <td>2.851388e+05</td>\n      <td>0.955966</td>\n      <td>0.921073</td>\n      <td>55.555567</td>\n      <td>12.889418</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>1818.281597</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>42325.117188</td>\n      <td>41081.722656</td>\n      <td>0.000733</td>\n      <td>5.939553e+04</td>\n      <td>Zimbabwe</td>\n      <td>0.842998</td>\n      <td>0.227109</td>\n      <td>...</td>\n      <td>42296.062500</td>\n      <td>42694.070312</td>\n      <td>40826.570312</td>\n      <td>1.055221</td>\n      <td>5.974304e+04</td>\n      <td>0.910977</td>\n      <td>0.902522</td>\n      <td>56.666633</td>\n      <td>1.000000</td>\n      <td>2019</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#c9cb81df .cell execution_count=48}\n``` {.python .cell-code}\n#pwt2019.fillna(method='ffill')\npwt2019.fillna(method='bfill')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\admin\\AppData\\Local\\Temp\\ipykernel_16464\\1604694572.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  pwt2019.fillna(method='bfill')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2019</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>1609.068998</td>\n      <td>1.481984</td>\n      <td>3023.694824</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>Kwanza</td>\n      <td>2019</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>1609.068998</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>1.075898</td>\n      <td>1609.068998</td>\n      <td>2.964992</td>\n      <td>438.470032</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>0.793385</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>1609.068998</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>0.793385</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>1609.068998</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>0.793385</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>2019</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.062500</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-5.730492e-02</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>Yemeni Rial</td>\n      <td>2019</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>2191.363362</td>\n      <td>1.842989</td>\n      <td>49266.472656</td>\n      <td>...</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-1.733917e-01</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n      <td>0.174729</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>Rand</td>\n      <td>2019</td>\n      <td>748940.000000</td>\n      <td>734094.375000</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>2191.363362</td>\n      <td>2.908202</td>\n      <td>623669.562500</td>\n      <td>...</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n      <td>0.315006</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>Kwacha</td>\n      <td>2019</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>NaN</td>\n      <td>2.686845</td>\n      <td>38698.402344</td>\n      <td>...</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>2.839118e-02</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n      <td>0.295188</td>\n      <td>0.360382</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-8.979837e-02</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n**插值法（Interpolation）**\n\n除了填充给定值以外，也有更复杂的插值法。\n\n::: {#da69d644 .cell execution_count=49}\n``` {.python .cell-code}\npwt2019.interpolate(method=\"linear\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\admin\\AppData\\Local\\Temp\\ipykernel_16464\\33985437.py:1: FutureWarning: DataFrame.interpolate with object dtype is deprecated and will raise in a future version. Call obj.infer_objects(copy=False) before interpolating instead.\n  pwt2019.interpolate(method=\"linear\")\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2019</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3023.694824</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>Kwanza</td>\n      <td>2019</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>NaN</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>8.860430</td>\n      <td>NaN</td>\n      <td>2.223488</td>\n      <td>438.470032</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>0.495372</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>NaN</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>0.594710</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>NaN</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>0.694047</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>2019</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.062500</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-5.730492e-02</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>1.485950</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>Yemeni Rial</td>\n      <td>2019</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>2161.665797</td>\n      <td>1.842989</td>\n      <td>49266.472656</td>\n      <td>...</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-1.733917e-01</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n      <td>0.174729</td>\n      <td>1.005748</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>Rand</td>\n      <td>2019</td>\n      <td>748940.000000</td>\n      <td>734094.375000</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>2191.363362</td>\n      <td>2.908202</td>\n      <td>623669.562500</td>\n      <td>...</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n      <td>0.315006</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>Kwacha</td>\n      <td>2019</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>2191.363362</td>\n      <td>2.686845</td>\n      <td>38698.402344</td>\n      <td>...</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>2.839118e-02</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n      <td>0.295188</td>\n      <td>0.360382</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>2191.363362</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-8.979837e-02</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n更复杂的方法涉及到模型估计问题，如KNN预测等。Scikit-learn库有专门的方法，这里就不多涉及。\n\n::: {#0e4ed97e .cell execution_count=50}\n``` {.python .cell-code}\nfrom sklearn.impute import SimpleImputer\nimputer_mean = SimpleImputer(strategy='mean')\npd.DataFrame(imputer_mean.fit_transform(pwt2019.select_dtypes(np.number)), columns=pwt2019.select_dtypes(np.number).columns)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>cgdpe</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019.0</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>1849.981084</td>\n      <td>2.709271</td>\n      <td>3023.694824</td>\n      <td>3877.659668</td>\n      <td>3912.334717</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019.0</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>1849.981084</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>198750.421875</td>\n      <td>227771.609375</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019.0</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>18.736708</td>\n      <td>1849.981084</td>\n      <td>2.709271</td>\n      <td>438.470032</td>\n      <td>509.044983</td>\n      <td>375.136444</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>0.835094</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019.0</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>1849.981084</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>40868.316406</td>\n      <td>35808.343750</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>0.835094</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019.0</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>1849.981084</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>515623.312500</td>\n      <td>678241.187500</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>0.835094</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2019.0</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.062500</td>\n      <td>758821.937500</td>\n      <td>747853.750000</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-5.730492e-02</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>0.835094</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2019.0</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>1849.981084</td>\n      <td>1.842989</td>\n      <td>49266.472656</td>\n      <td>67992.531250</td>\n      <td>49937.042969</td>\n      <td>...</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-1.733917e-01</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n      <td>0.174729</td>\n      <td>0.835094</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2019.0</td>\n      <td>748940.000000</td>\n      <td>734094.375000</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>2191.363362</td>\n      <td>2.908202</td>\n      <td>623669.562500</td>\n      <td>741675.937500</td>\n      <td>748245.937500</td>\n      <td>...</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n      <td>0.315006</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2019.0</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>1849.981084</td>\n      <td>2.686845</td>\n      <td>38698.402344</td>\n      <td>56536.863281</td>\n      <td>57695.066406</td>\n      <td>...</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>2.839118e-02</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n      <td>0.295188</td>\n      <td>0.360382</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>2019.0</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>1849.981084</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>42325.117188</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-8.979837e-02</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 43 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 缩尾处理\n\n应用中，常需要对异常值进行一定的处理，其中一种方法是缩尾处理（Winsorize），将极端值替换为某个百分位数的值，例如，将上限设为 99 百分位数，下限设为 1 百分位数。\n\n可以使用`df.clip()`函数实现，例如全要素生产率水平`ctfp`：\n\n::: {#8b46ed8f .cell execution_count=51}\n``` {.python .cell-code}\nq95 = pwt2019['ctfp'].quantile(0.95)\nq05 = pwt2019['ctfp'].quantile(0.05)\n\npwt2019['ctfp'].dropna().clip(lower=q05, upper=q95, inplace=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\ncountrycode\nAGO    0.387996\nARG    0.828559\nARM    0.838301\nAUS    0.837649\nAUT    0.829206\n         ...   \nUSA    1.000000\nVEN    0.266597\nZAF    0.547630\nZMB    0.266597\nZWE    0.374524\nName: ctfp, Length: 118, dtype: float64\n```\n:::\n:::\n\n\n### 观测值排序\n\n有时候需要对数据集进行一定的排序，Pandas中可以按索引(`df.sort_index`)和值（`df.sort_values`）排序。\n\n例如，将索引按降序排序，这里的索引是国家代码，因此升序/降序是按照字母顺序：\n\n::: {#a1ecbab6 .cell execution_count=52}\n``` {.python .cell-code}\npwt2019.sort_index(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>2019</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-8.979837e-02</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>Kwacha</td>\n      <td>2019</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>NaN</td>\n      <td>2.686845</td>\n      <td>38698.402344</td>\n      <td>...</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>2.839118e-02</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n      <td>0.295188</td>\n      <td>0.360382</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>Rand</td>\n      <td>2019</td>\n      <td>748940.000000</td>\n      <td>734094.375000</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>2191.363362</td>\n      <td>2.908202</td>\n      <td>623669.562500</td>\n      <td>...</td>\n      <td>0.184207</td>\n      <td>-0.198112</td>\n      <td>4.914912e-03</td>\n      <td>0.463660</td>\n      <td>0.523813</td>\n      <td>0.447869</td>\n      <td>0.660216</td>\n      <td>0.604546</td>\n      <td>0.315006</td>\n      <td>0.525546</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>Yemeni Rial</td>\n      <td>2019</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>NaN</td>\n      <td>1.842989</td>\n      <td>49266.472656</td>\n      <td>...</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-1.733917e-01</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n      <td>0.174729</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>2019</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.062500</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-5.730492e-02</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>UAE Dirham</td>\n      <td>2019</td>\n      <td>681525.812500</td>\n      <td>645956.250000</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>NaN</td>\n      <td>2.746695</td>\n      <td>306771.156250</td>\n      <td>...</td>\n      <td>0.889652</td>\n      <td>-0.701231</td>\n      <td>-4.849206e-07</td>\n      <td>0.725061</td>\n      <td>0.480580</td>\n      <td>0.692488</td>\n      <td>0.688882</td>\n      <td>0.647336</td>\n      <td>0.270424</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>Lek</td>\n      <td>2019</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>NaN</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>6.114468e-02</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>AIA</th>\n      <td>Anguilla</td>\n      <td>East Caribbean Dollar</td>\n      <td>2019</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>438.470032</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-1.433542e-01</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>Kwanza</td>\n      <td>2019</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>NaN</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-1.204703e-01</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2019</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3023.694824</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n来看`df.sort_values`的例子，假设我们希望按2019年的人均GDP（PPP链式调整后）降序排列：\n\n::: {#f804093d .cell execution_count=53}\n``` {.python .cell-code}\npwt2019['rgdp_per'] = pwt2019['rgdpe']/pwt2019['pop']\npwt2019.sort_values(by='rgdp_per', ascending=False) \n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>year</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>...</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n      <th>rgdp_per</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>LUX</th>\n      <td>Luxembourg</td>\n      <td>Euro</td>\n      <td>2019</td>\n      <td>69541.328125</td>\n      <td>55710.792969</td>\n      <td>0.615729</td>\n      <td>0.460663</td>\n      <td>1505.558542</td>\n      <td>3.619643</td>\n      <td>27761.587891</td>\n      <td>...</td>\n      <td>-0.634807</td>\n      <td>0.471916</td>\n      <td>1.068363</td>\n      <td>0.746287</td>\n      <td>1.494213</td>\n      <td>0.699133</td>\n      <td>0.634588</td>\n      <td>0.679715</td>\n      <td>1.277610</td>\n      <td>112941.453342</td>\n    </tr>\n    <tr>\n      <th>MAC</th>\n      <td>China, Macao SAR</td>\n      <td>Pataca</td>\n      <td>2019</td>\n      <td>67463.125000</td>\n      <td>59874.164062</td>\n      <td>0.640445</td>\n      <td>0.387800</td>\n      <td>NaN</td>\n      <td>2.962418</td>\n      <td>23970.996094</td>\n      <td>...</td>\n      <td>-0.287785</td>\n      <td>0.704883</td>\n      <td>0.786052</td>\n      <td>0.792587</td>\n      <td>0.848400</td>\n      <td>0.709010</td>\n      <td>0.694729</td>\n      <td>0.575298</td>\n      <td>2.026497</td>\n      <td>105337.890061</td>\n    </tr>\n    <tr>\n      <th>QAT</th>\n      <td>Qatar</td>\n      <td>Qatari Rial</td>\n      <td>2019</td>\n      <td>292963.531250</td>\n      <td>323141.156250</td>\n      <td>2.832067</td>\n      <td>2.083951</td>\n      <td>NaN</td>\n      <td>3.259456</td>\n      <td>86421.289062</td>\n      <td>...</td>\n      <td>-0.143853</td>\n      <td>-0.100826</td>\n      <td>0.887102</td>\n      <td>0.496124</td>\n      <td>0.890964</td>\n      <td>0.526706</td>\n      <td>0.649064</td>\n      <td>0.333427</td>\n      <td>0.602027</td>\n      <td>103445.127269</td>\n    </tr>\n    <tr>\n      <th>IRL</th>\n      <td>Ireland</td>\n      <td>Euro</td>\n      <td>2019</td>\n      <td>499741.093750</td>\n      <td>501053.593750</td>\n      <td>4.882495</td>\n      <td>2.260448</td>\n      <td>1771.977942</td>\n      <td>3.185517</td>\n      <td>149572.484375</td>\n      <td>...</td>\n      <td>-0.338841</td>\n      <td>-0.045312</td>\n      <td>1.093603</td>\n      <td>0.648436</td>\n      <td>1.102568</td>\n      <td>0.670558</td>\n      <td>0.603306</td>\n      <td>0.556753</td>\n      <td>0.924193</td>\n      <td>102353.631443</td>\n    </tr>\n    <tr>\n      <th>SGP</th>\n      <td>Singapore</td>\n      <td>Singapore Dollar</td>\n      <td>2019</td>\n      <td>514376.312500</td>\n      <td>477907.875000</td>\n      <td>5.804337</td>\n      <td>3.759604</td>\n      <td>2330.165875</td>\n      <td>4.351568</td>\n      <td>229661.500000</td>\n      <td>...</td>\n      <td>-1.117445</td>\n      <td>0.204641</td>\n      <td>0.761578</td>\n      <td>0.687142</td>\n      <td>0.709089</td>\n      <td>0.711649</td>\n      <td>0.673213</td>\n      <td>0.465293</td>\n      <td>0.946837</td>\n      <td>88619.305271</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>MWI</th>\n      <td>Malawi</td>\n      <td>Kwacha</td>\n      <td>2019</td>\n      <td>20362.392578</td>\n      <td>21635.066406</td>\n      <td>18.628747</td>\n      <td>7.950418</td>\n      <td>NaN</td>\n      <td>2.039123</td>\n      <td>20989.886719</td>\n      <td>...</td>\n      <td>-0.241531</td>\n      <td>0.077543</td>\n      <td>0.362767</td>\n      <td>0.652624</td>\n      <td>0.379577</td>\n      <td>0.619848</td>\n      <td>0.560215</td>\n      <td>0.474424</td>\n      <td>NaN</td>\n      <td>1093.062919</td>\n    </tr>\n    <tr>\n      <th>COD</th>\n      <td>D.R. of the Congo</td>\n      <td>Franc Congolais</td>\n      <td>2019</td>\n      <td>89061.671875</td>\n      <td>88673.375000</td>\n      <td>86.790567</td>\n      <td>25.139931</td>\n      <td>NaN</td>\n      <td>1.679057</td>\n      <td>78981.921875</td>\n      <td>...</td>\n      <td>-0.098445</td>\n      <td>-0.059303</td>\n      <td>0.460019</td>\n      <td>0.950114</td>\n      <td>0.540407</td>\n      <td>0.646659</td>\n      <td>0.656502</td>\n      <td>0.620774</td>\n      <td>NaN</td>\n      <td>1026.167646</td>\n    </tr>\n    <tr>\n      <th>CAF</th>\n      <td>Central African Republic</td>\n      <td>CFA Franc BEAC</td>\n      <td>2019</td>\n      <td>4532.561035</td>\n      <td>4642.448730</td>\n      <td>4.745185</td>\n      <td>1.844328</td>\n      <td>NaN</td>\n      <td>1.561627</td>\n      <td>5007.587891</td>\n      <td>...</td>\n      <td>-0.131944</td>\n      <td>-0.125820</td>\n      <td>0.495756</td>\n      <td>0.669973</td>\n      <td>0.333296</td>\n      <td>0.685964</td>\n      <td>0.632491</td>\n      <td>0.375996</td>\n      <td>0.637043</td>\n      <td>955.191639</td>\n    </tr>\n    <tr>\n      <th>BDI</th>\n      <td>Burundi</td>\n      <td>Burundi Franc</td>\n      <td>2019</td>\n      <td>8664.988281</td>\n      <td>9109.688477</td>\n      <td>11.530580</td>\n      <td>5.003588</td>\n      <td>NaN</td>\n      <td>1.416526</td>\n      <td>9894.192383</td>\n      <td>...</td>\n      <td>-0.252394</td>\n      <td>0.007603</td>\n      <td>0.329781</td>\n      <td>0.543323</td>\n      <td>0.303669</td>\n      <td>0.650272</td>\n      <td>0.475958</td>\n      <td>0.351376</td>\n      <td>0.512554</td>\n      <td>751.478961</td>\n    </tr>\n    <tr>\n      <th>VEN</th>\n      <td>Venezuela (Bolivarian Republic of)</td>\n      <td>Bolivar Fuerte</td>\n      <td>2019</td>\n      <td>7166.571777</td>\n      <td>7160.106934</td>\n      <td>28.515829</td>\n      <td>11.694400</td>\n      <td>NaN</td>\n      <td>2.893462</td>\n      <td>9266.067383</td>\n      <td>...</td>\n      <td>-0.001072</td>\n      <td>-0.402837</td>\n      <td>18.143538</td>\n      <td>34.444988</td>\n      <td>14.175777</td>\n      <td>0.581305</td>\n      <td>0.645909</td>\n      <td>20.694918</td>\n      <td>12.002436</td>\n      <td>251.319075</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 51 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 数据集合并\n\n实际应用中，数据可能来自不同的来源，经常需要合并数据集，`pd.merge()`函数\n\n::: {#a7447768 .cell execution_count=54}\n``` {.python .cell-code}\nimport wbgapi as wb\ninf = wb.data.DataFrame(series='NY.GDP.DEFL.KD.ZG', time='2019')\npd.merge(df[['country','pop','emp']], inf, left_index=True, right_index=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>NY.GDP.DEFL.KD.ZG</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ABW</th>\n      <td>Aruba</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>6.017818</td>\n    </tr>\n    <tr>\n      <th>AGO</th>\n      <td>Angola</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>19.187004</td>\n    </tr>\n    <tr>\n      <th>ALB</th>\n      <td>Albania</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>1.000633</td>\n    </tr>\n    <tr>\n      <th>ARE</th>\n      <td>United Arab Emirates</td>\n      <td>9.770529</td>\n      <td>5.808834</td>\n      <td>-3.194409</td>\n    </tr>\n    <tr>\n      <th>ARG</th>\n      <td>Argentina</td>\n      <td>44.780677</td>\n      <td>20.643215</td>\n      <td>49.195579</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>VNM</th>\n      <td>Viet Nam</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2.423227</td>\n    </tr>\n    <tr>\n      <th>YEM</th>\n      <td>Yemen</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>ZAF</th>\n      <td>South Africa</td>\n      <td>58.558270</td>\n      <td>18.642710</td>\n      <td>4.613525</td>\n    </tr>\n    <tr>\n      <th>ZMB</th>\n      <td>Zambia</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>7.633470</td>\n    </tr>\n    <tr>\n      <th>ZWE</th>\n      <td>Zimbabwe</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>225.394837</td>\n    </tr>\n  </tbody>\n</table>\n<p>180 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 多级索引\n\n这里的数据是一个面板数据，“国家-年”对应一个观测值，可以利用Pandas的多级索引功能，详见Pandas文档[MultiIndex / advanced indexing](https://pandas.pydata.org/docs/dev/user_guide/advanced.html#)。\n\n::: {#37ea4981 .cell execution_count=55}\n``` {.python .cell-code}\npwt = pd.read_excel(io = \"datasets/pwt1001.xlsx\",\n                header=0,                \n                sheet_name=\"Data\")\npwt.set_index(['countrycode','year'], inplace=True)\n```\n:::\n\n\n我们可以使用`.loc()`方法选择需要的数据，例如：\n\n::: {#c08ce658 .cell execution_count=56}\n``` {.python .cell-code}\n# 中国子集\ndf_china = pwt.loc['CHN']\n# 中国、美国子集\ndf_china_us = pwt.loc[['CHN','USA']]\n# 变量子集\ndf_sub_china_us = pwt.loc[['CHN', 'USA']][['rgdpe','rgdpo']]\n```\n:::\n\n\n如果需要选择某一年的截面数据：\n\n::: {#ee4720c9 .cell execution_count=57}\n``` {.python .cell-code}\npwt.loc[(slice(None), [2019]), :]\n# 1992年之后的数据\npwt.loc[(slice(None), slice(1992, None)), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ABW</th>\n      <th>1992</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>2944.516113</td>\n      <td>3370.537598</td>\n      <td>0.068235</td>\n      <td>0.030903</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1722.105103</td>\n      <td>2955.295898</td>\n      <td>...</td>\n      <td>0.777795</td>\n      <td>-0.477860</td>\n      <td>-0.035383</td>\n      <td>0.412954</td>\n      <td>0.259626</td>\n      <td>0.432003</td>\n      <td>0.319757</td>\n      <td>0.482569</td>\n      <td>0.269071</td>\n      <td>0.903971</td>\n    </tr>\n    <tr>\n      <th>1993</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3131.370850</td>\n      <td>3698.532471</td>\n      <td>0.072504</td>\n      <td>0.032912</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1860.497559</td>\n      <td>3167.873291</td>\n      <td>...</td>\n      <td>0.824972</td>\n      <td>-0.601976</td>\n      <td>-0.035119</td>\n      <td>0.437298</td>\n      <td>0.272653</td>\n      <td>0.471235</td>\n      <td>0.354660</td>\n      <td>0.455204</td>\n      <td>0.281028</td>\n      <td>0.897604</td>\n    </tr>\n    <tr>\n      <th>1994</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3537.953369</td>\n      <td>4172.824219</td>\n      <td>0.076700</td>\n      <td>0.034896</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2015.998657</td>\n      <td>3393.726807</td>\n      <td>...</td>\n      <td>0.764192</td>\n      <td>-0.501460</td>\n      <td>-0.040448</td>\n      <td>0.447622</td>\n      <td>0.297497</td>\n      <td>0.427549</td>\n      <td>0.377078</td>\n      <td>0.508004</td>\n      <td>0.310169</td>\n      <td>0.939461</td>\n    </tr>\n    <tr>\n      <th>1995</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3412.874512</td>\n      <td>4184.156250</td>\n      <td>0.080324</td>\n      <td>0.036628</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2034.535400</td>\n      <td>3435.050781</td>\n      <td>...</td>\n      <td>0.765721</td>\n      <td>-0.542942</td>\n      <td>-0.030582</td>\n      <td>0.451724</td>\n      <td>0.303802</td>\n      <td>0.525235</td>\n      <td>0.404533</td>\n      <td>0.547051</td>\n      <td>0.282667</td>\n      <td>0.820760</td>\n    </tr>\n    <tr>\n      <th>1996</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3428.601074</td>\n      <td>3977.093018</td>\n      <td>0.083200</td>\n      <td>0.038026</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2167.170654</td>\n      <td>3444.941162</td>\n      <td>...</td>\n      <td>0.840301</td>\n      <td>-0.669186</td>\n      <td>-0.034326</td>\n      <td>0.462360</td>\n      <td>0.318055</td>\n      <td>0.558904</td>\n      <td>0.419020</td>\n      <td>0.506942</td>\n      <td>0.291405</td>\n      <td>0.803551</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ZWE</th>\n      <th>2015</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>40141.617188</td>\n      <td>39798.644531</td>\n      <td>13.814629</td>\n      <td>6.393752</td>\n      <td>NaN</td>\n      <td>2.584653</td>\n      <td>44249.355469</td>\n      <td>47325.460938</td>\n      <td>...</td>\n      <td>0.140172</td>\n      <td>-0.287693</td>\n      <td>-0.051930</td>\n      <td>0.479228</td>\n      <td>0.651287</td>\n      <td>0.541446</td>\n      <td>0.616689</td>\n      <td>0.533235</td>\n      <td>0.425715</td>\n      <td>1.778124</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>41875.203125</td>\n      <td>40963.191406</td>\n      <td>14.030331</td>\n      <td>6.504374</td>\n      <td>NaN</td>\n      <td>2.616257</td>\n      <td>43291.566406</td>\n      <td>46404.160156</td>\n      <td>...</td>\n      <td>0.131920</td>\n      <td>-0.251232</td>\n      <td>-0.016258</td>\n      <td>0.470640</td>\n      <td>0.651027</td>\n      <td>0.539631</td>\n      <td>0.619789</td>\n      <td>0.519718</td>\n      <td>0.419446</td>\n      <td>1.728804</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44672.175781</td>\n      <td>44316.742188</td>\n      <td>14.236595</td>\n      <td>6.611773</td>\n      <td>NaN</td>\n      <td>2.648248</td>\n      <td>46113.945312</td>\n      <td>49457.570312</td>\n      <td>...</td>\n      <td>0.126722</td>\n      <td>-0.202827</td>\n      <td>-0.039897</td>\n      <td>0.473560</td>\n      <td>0.639560</td>\n      <td>0.519956</td>\n      <td>0.619739</td>\n      <td>0.552042</td>\n      <td>0.418681</td>\n      <td>1.756007</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44325.109375</td>\n      <td>43420.898438</td>\n      <td>14.438802</td>\n      <td>6.714952</td>\n      <td>NaN</td>\n      <td>2.680630</td>\n      <td>46198.441406</td>\n      <td>49665.386719</td>\n      <td>...</td>\n      <td>0.144485</td>\n      <td>-0.263658</td>\n      <td>-0.020791</td>\n      <td>0.543757</td>\n      <td>0.655473</td>\n      <td>0.529867</td>\n      <td>0.641361</td>\n      <td>0.561526</td>\n      <td>0.426527</td>\n      <td>1.830088</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-0.089798</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>5124 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n这里使用了`df.loc`结合`slice`函数的方法，注意：\n\n- `slice(None)`: 这表示选择 所有 `countrycode`。\n- `slice(1992, None)`: 这表示从 `year` 的 1992年 开始，选择到 **所有**后续年份。由于索引是排序的（通常情况下），这有效地选择了所有 `year > 1992` 的数据。\n- `:`表示选择所有列。\n\n上面的例子使用`slice`函数不是那么直观，也可以使用`df.index.get_level_values('year')`提取索引`year`的值，形成一个序列（可以另存为一个变量），然后利用表达式生成一个布尔序列，对数据框进行筛选：\n\n::: {#ab788d9e .cell execution_count=58}\n``` {.python .cell-code}\npwt[pwt.index.get_level_values('year') > 1992]\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ABW</th>\n      <th>1993</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3131.370850</td>\n      <td>3698.532471</td>\n      <td>0.072504</td>\n      <td>0.032912</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1860.497559</td>\n      <td>3167.873291</td>\n      <td>...</td>\n      <td>0.824972</td>\n      <td>-0.601976</td>\n      <td>-0.035119</td>\n      <td>0.437298</td>\n      <td>0.272653</td>\n      <td>0.471235</td>\n      <td>0.354660</td>\n      <td>0.455204</td>\n      <td>0.281028</td>\n      <td>0.897604</td>\n    </tr>\n    <tr>\n      <th>1994</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3537.953369</td>\n      <td>4172.824219</td>\n      <td>0.076700</td>\n      <td>0.034896</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2015.998657</td>\n      <td>3393.726807</td>\n      <td>...</td>\n      <td>0.764192</td>\n      <td>-0.501460</td>\n      <td>-0.040448</td>\n      <td>0.447622</td>\n      <td>0.297497</td>\n      <td>0.427549</td>\n      <td>0.377078</td>\n      <td>0.508004</td>\n      <td>0.310169</td>\n      <td>0.939461</td>\n    </tr>\n    <tr>\n      <th>1995</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3412.874512</td>\n      <td>4184.156250</td>\n      <td>0.080324</td>\n      <td>0.036628</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2034.535400</td>\n      <td>3435.050781</td>\n      <td>...</td>\n      <td>0.765721</td>\n      <td>-0.542942</td>\n      <td>-0.030582</td>\n      <td>0.451724</td>\n      <td>0.303802</td>\n      <td>0.525235</td>\n      <td>0.404533</td>\n      <td>0.547051</td>\n      <td>0.282667</td>\n      <td>0.820760</td>\n    </tr>\n    <tr>\n      <th>1996</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3428.601074</td>\n      <td>3977.093018</td>\n      <td>0.083200</td>\n      <td>0.038026</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2167.170654</td>\n      <td>3444.941162</td>\n      <td>...</td>\n      <td>0.840301</td>\n      <td>-0.669186</td>\n      <td>-0.034326</td>\n      <td>0.462360</td>\n      <td>0.318055</td>\n      <td>0.558904</td>\n      <td>0.419020</td>\n      <td>0.506942</td>\n      <td>0.291405</td>\n      <td>0.803551</td>\n    </tr>\n    <tr>\n      <th>1997</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3718.441406</td>\n      <td>4282.010254</td>\n      <td>0.085451</td>\n      <td>0.039143</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2264.614014</td>\n      <td>3740.265869</td>\n      <td>...</td>\n      <td>0.849453</td>\n      <td>-0.723889</td>\n      <td>-0.017507</td>\n      <td>0.481048</td>\n      <td>0.325158</td>\n      <td>0.563639</td>\n      <td>0.417158</td>\n      <td>0.481417</td>\n      <td>0.299164</td>\n      <td>0.821012</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ZWE</th>\n      <th>2015</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>40141.617188</td>\n      <td>39798.644531</td>\n      <td>13.814629</td>\n      <td>6.393752</td>\n      <td>NaN</td>\n      <td>2.584653</td>\n      <td>44249.355469</td>\n      <td>47325.460938</td>\n      <td>...</td>\n      <td>0.140172</td>\n      <td>-0.287693</td>\n      <td>-0.051930</td>\n      <td>0.479228</td>\n      <td>0.651287</td>\n      <td>0.541446</td>\n      <td>0.616689</td>\n      <td>0.533235</td>\n      <td>0.425715</td>\n      <td>1.778124</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>41875.203125</td>\n      <td>40963.191406</td>\n      <td>14.030331</td>\n      <td>6.504374</td>\n      <td>NaN</td>\n      <td>2.616257</td>\n      <td>43291.566406</td>\n      <td>46404.160156</td>\n      <td>...</td>\n      <td>0.131920</td>\n      <td>-0.251232</td>\n      <td>-0.016258</td>\n      <td>0.470640</td>\n      <td>0.651027</td>\n      <td>0.539631</td>\n      <td>0.619789</td>\n      <td>0.519718</td>\n      <td>0.419446</td>\n      <td>1.728804</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44672.175781</td>\n      <td>44316.742188</td>\n      <td>14.236595</td>\n      <td>6.611773</td>\n      <td>NaN</td>\n      <td>2.648248</td>\n      <td>46113.945312</td>\n      <td>49457.570312</td>\n      <td>...</td>\n      <td>0.126722</td>\n      <td>-0.202827</td>\n      <td>-0.039897</td>\n      <td>0.473560</td>\n      <td>0.639560</td>\n      <td>0.519956</td>\n      <td>0.619739</td>\n      <td>0.552042</td>\n      <td>0.418681</td>\n      <td>1.756007</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44325.109375</td>\n      <td>43420.898438</td>\n      <td>14.438802</td>\n      <td>6.714952</td>\n      <td>NaN</td>\n      <td>2.680630</td>\n      <td>46198.441406</td>\n      <td>49665.386719</td>\n      <td>...</td>\n      <td>0.144485</td>\n      <td>-0.263658</td>\n      <td>-0.020791</td>\n      <td>0.543757</td>\n      <td>0.655473</td>\n      <td>0.529867</td>\n      <td>0.641361</td>\n      <td>0.561526</td>\n      <td>0.426527</td>\n      <td>1.830088</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-0.089798</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>4941 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n当然，可以同时选择指定的变量和年份，例如：\n\n::: {#2d55278c .cell execution_count=59}\n``` {.python .cell-code}\npwt.loc[(slice(None),[2016,2019]), ['rgdpe','rgdpo']]\n#\npwt.loc[(([\"CHN\", \"USA\"], [2016,2019])), ['rgdpe','rgdpo']]\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">CHN</th>\n      <th>2016</th>\n      <td>18611202.0</td>\n      <td>18591710.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>20056066.0</td>\n      <td>20257660.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">USA</th>\n      <th>2016</th>\n      <td>19285252.0</td>\n      <td>19095196.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>20860506.0</td>\n      <td>20595844.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n除了通常的排序以外，由于有了二级索引，如果按索引排序，两级索引变量是同时排序的：\n\n::: {#9402bbc4 .cell execution_count=60}\n``` {.python .cell-code}\npwt.sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ABW</th>\n      <th>1950</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1951</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1952</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1953</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1954</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ZWE</th>\n      <th>2015</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>40141.617188</td>\n      <td>39798.644531</td>\n      <td>13.814629</td>\n      <td>6.393752</td>\n      <td>NaN</td>\n      <td>2.584653</td>\n      <td>44249.355469</td>\n      <td>47325.460938</td>\n      <td>...</td>\n      <td>0.140172</td>\n      <td>-0.287693</td>\n      <td>-0.051930</td>\n      <td>0.479228</td>\n      <td>0.651287</td>\n      <td>0.541446</td>\n      <td>0.616689</td>\n      <td>0.533235</td>\n      <td>0.425715</td>\n      <td>1.778124</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>41875.203125</td>\n      <td>40963.191406</td>\n      <td>14.030331</td>\n      <td>6.504374</td>\n      <td>NaN</td>\n      <td>2.616257</td>\n      <td>43291.566406</td>\n      <td>46404.160156</td>\n      <td>...</td>\n      <td>0.131920</td>\n      <td>-0.251232</td>\n      <td>-0.016258</td>\n      <td>0.470640</td>\n      <td>0.651027</td>\n      <td>0.539631</td>\n      <td>0.619789</td>\n      <td>0.519718</td>\n      <td>0.419446</td>\n      <td>1.728804</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44672.175781</td>\n      <td>44316.742188</td>\n      <td>14.236595</td>\n      <td>6.611773</td>\n      <td>NaN</td>\n      <td>2.648248</td>\n      <td>46113.945312</td>\n      <td>49457.570312</td>\n      <td>...</td>\n      <td>0.126722</td>\n      <td>-0.202827</td>\n      <td>-0.039897</td>\n      <td>0.473560</td>\n      <td>0.639560</td>\n      <td>0.519956</td>\n      <td>0.619739</td>\n      <td>0.552042</td>\n      <td>0.418681</td>\n      <td>1.756007</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>44325.109375</td>\n      <td>43420.898438</td>\n      <td>14.438802</td>\n      <td>6.714952</td>\n      <td>NaN</td>\n      <td>2.680630</td>\n      <td>46198.441406</td>\n      <td>49665.386719</td>\n      <td>...</td>\n      <td>0.144485</td>\n      <td>-0.263658</td>\n      <td>-0.020791</td>\n      <td>0.543757</td>\n      <td>0.655473</td>\n      <td>0.529867</td>\n      <td>0.641361</td>\n      <td>0.561526</td>\n      <td>0.426527</td>\n      <td>1.830088</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-0.089798</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>12810 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n可以对两级索引以列表的形式分别设定排序的顺序。例如，先将国家代码按字母升序，然后将年降序：\n\n::: {#21129da7 .cell execution_count=61}\n``` {.python .cell-code}\npwt.sort_index(ascending=[True, False])\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ABW</th>\n      <th>2019</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3921.261230</td>\n      <td>3467.299561</td>\n      <td>0.106314</td>\n      <td>0.047601</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3023.694824</td>\n      <td>3877.659668</td>\n      <td>...</td>\n      <td>0.973115</td>\n      <td>-1.091808</td>\n      <td>2.125691e-07</td>\n      <td>0.883092</td>\n      <td>0.815759</td>\n      <td>0.744329</td>\n      <td>0.707260</td>\n      <td>0.622660</td>\n      <td>0.805100</td>\n      <td>0.648114</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3927.566650</td>\n      <td>3444.658691</td>\n      <td>0.105845</td>\n      <td>0.047391</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3040.981201</td>\n      <td>3903.104736</td>\n      <td>...</td>\n      <td>1.015919</td>\n      <td>-1.141796</td>\n      <td>6.378183e-07</td>\n      <td>0.857056</td>\n      <td>0.789754</td>\n      <td>0.722777</td>\n      <td>0.661298</td>\n      <td>0.584303</td>\n      <td>0.788550</td>\n      <td>0.641680</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3979.910400</td>\n      <td>3062.580566</td>\n      <td>0.105366</td>\n      <td>0.047176</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3044.065674</td>\n      <td>3912.317871</td>\n      <td>...</td>\n      <td>1.117661</td>\n      <td>-1.395119</td>\n      <td>-1.487947e-16</td>\n      <td>0.809308</td>\n      <td>0.732397</td>\n      <td>0.682043</td>\n      <td>0.654755</td>\n      <td>0.512391</td>\n      <td>0.739654</td>\n      <td>0.648690</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3953.522217</td>\n      <td>3320.976807</td>\n      <td>0.104872</td>\n      <td>0.046955</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3025.953857</td>\n      <td>3915.882080</td>\n      <td>...</td>\n      <td>1.028300</td>\n      <td>-1.184166</td>\n      <td>0.000000e+00</td>\n      <td>0.798115</td>\n      <td>0.713214</td>\n      <td>0.667523</td>\n      <td>0.606928</td>\n      <td>0.523677</td>\n      <td>0.658227</td>\n      <td>0.583411</td>\n    </tr>\n    <tr>\n      <th>2015</th>\n      <td>Aruba</td>\n      <td>Aruban Guilder</td>\n      <td>3959.592529</td>\n      <td>3921.183350</td>\n      <td>0.104341</td>\n      <td>0.046717</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3029.995605</td>\n      <td>3972.749268</td>\n      <td>...</td>\n      <td>0.923424</td>\n      <td>-0.925770</td>\n      <td>1.913542e-06</td>\n      <td>0.795370</td>\n      <td>0.667704</td>\n      <td>0.660781</td>\n      <td>0.586393</td>\n      <td>0.589976</td>\n      <td>0.585710</td>\n      <td>0.514230</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ZWE</th>\n      <th>1954</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>6373.737305</td>\n      <td>6277.433594</td>\n      <td>3.172192</td>\n      <td>1.481345</td>\n      <td>NaN</td>\n      <td>1.17999</td>\n      <td>5446.246582</td>\n      <td>6939.838867</td>\n      <td>...</td>\n      <td>0.000010</td>\n      <td>-0.000005</td>\n      <td>-1.181179e-01</td>\n      <td>0.123506</td>\n      <td>0.119157</td>\n      <td>0.106431</td>\n      <td>0.093195</td>\n      <td>0.077997</td>\n      <td>0.102318</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1953</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1952</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1951</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1950</th>\n      <td>Zimbabwe</td>\n      <td>US Dollar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>12810 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n### `stack` 和 `unstack`\n\n数据有“长（long）”和“宽（wide）”两种组织方式，Penn World Table 是以“长”的形式保存的。有时候需要在两种数据格式之间进行转换，就需要用到`df.stack()`和`df.unstack()`函数。\n\n注意，`df.unstack()`函数的参数`level=`，设置为哪一级索引，便生成为列。默认在最后一级索引上转换，即年，因此列便为年，行为国家，反之，列为国家，行为年。如下面例子所示，为了简便只保留了三个国家5年的数据：\n\n::: {#5544da98 .cell execution_count=62}\n``` {.python .cell-code}\npwt_sub = pwt.loc[([\"CHN\", \"KOR\", \"USA\"], slice(2015, None)), [\"rgdpe\", \"pop\"]]\n# \npwt_sub_wide = pwt_sub.unstack(level=-1)\n# pwt_sub.unstack(level=0)\n```\n:::\n\n\n要获得长格式的数据，使用`df.stack()`即可：\n\n::: {#2e5d8669 .cell execution_count=63}\n``` {.python .cell-code}\npwt_sub_wide.stack(future_stack=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>rgdpe</th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">CHN</th>\n      <th>2015</th>\n      <td>1.786628e+07</td>\n      <td>1406.847870</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>1.861120e+07</td>\n      <td>1414.049351</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>1.950114e+07</td>\n      <td>1421.021791</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>1.950871e+07</td>\n      <td>1427.647786</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>2.005607e+07</td>\n      <td>1433.783686</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">KOR</th>\n      <th>2015</th>\n      <td>1.928057e+06</td>\n      <td>50.823093</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>1.999700e+06</td>\n      <td>50.983457</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>2.070936e+06</td>\n      <td>51.096415</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>2.102052e+06</td>\n      <td>51.171706</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>2.090946e+06</td>\n      <td>51.225308</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">USA</th>\n      <th>2015</th>\n      <td>1.890512e+07</td>\n      <td>320.878310</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>1.928525e+07</td>\n      <td>323.015995</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>1.975475e+07</td>\n      <td>325.084756</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>2.036944e+07</td>\n      <td>327.096265</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>2.086051e+07</td>\n      <td>329.064917</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n当我们从一些数据库下载数据时，常见形式为列为不同时期相同变量的值。例如，从世界银行下载人均GDP和人口数据：\n\n::: {#959b5bae .cell execution_count=64}\n``` {.python .cell-code}\nimport wbgapi as wb\ndf = wb.data.DataFrame(series=['NY.GDP.PCAP.CD', \"SP.POP.TOTL\"], \n                                #time=range(2017,2020),\n                                time=['YR2017','YR2018','YR2019'],\n                                 numericTimeKeys=True)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>2017</th>\n      <th>2018</th>\n      <th>2019</th>\n    </tr>\n    <tr>\n      <th>economy</th>\n      <th>series</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">ABW</th>\n      <th>NY.GDP.PCAP.CD</th>\n      <td>2.844005e+04</td>\n      <td>3.008213e+04</td>\n      <td>3.109621e+04</td>\n    </tr>\n    <tr>\n      <th>SP.POP.TOTL</th>\n      <td>1.087350e+05</td>\n      <td>1.089080e+05</td>\n      <td>1.092030e+05</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">AFE</th>\n      <th>NY.GDP.PCAP.CD</th>\n      <td>1.520212e+03</td>\n      <td>1.538902e+03</td>\n      <td>1.493818e+03</td>\n    </tr>\n    <tr>\n      <th>SP.POP.TOTL</th>\n      <td>6.400587e+08</td>\n      <td>6.578011e+08</td>\n      <td>6.759502e+08</td>\n    </tr>\n    <tr>\n      <th>AFG</th>\n      <th>NY.GDP.PCAP.CD</th>\n      <td>5.254698e+02</td>\n      <td>4.913372e+02</td>\n      <td>4.966025e+02</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n下载的数据`df`索引是“economy - series”，每一年数据一列。我们希望序列成为列变量，时间成为索引。我们可以先对数据进行转置成宽格式的数据，然后再在国家层面堆叠，使其成为索引，再交换索引排序得到通常的情况：\n\n::: {#46c6b90a .cell execution_count=65}\n``` {.python .cell-code}\ndf.T.stack(level=0, future_stack=True).swaplevel().sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>series</th>\n      <th>NY.GDP.PCAP.CD</th>\n      <th>SP.POP.TOTL</th>\n    </tr>\n    <tr>\n      <th>economy</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">ABW</th>\n      <th>2017</th>\n      <td>28440.051964</td>\n      <td>108735.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>30082.127645</td>\n      <td>108908.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>31096.205074</td>\n      <td>109203.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">AFE</th>\n      <th>2017</th>\n      <td>1520.212231</td>\n      <td>640058741.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>1538.901679</td>\n      <td>657801085.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">ZMB</th>\n      <th>2018</th>\n      <td>1463.899979</td>\n      <td>17973569.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>1258.986198</td>\n      <td>18513839.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">ZWE</th>\n      <th>2017</th>\n      <td>3448.086991</td>\n      <td>14812482.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>2271.852504</td>\n      <td>15034452.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>1683.913136</td>\n      <td>15271368.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>798 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n另外，stack不是唯一的方法，也可以使用`df.melt()`结合`df.pivot_table()`函数来实现：\n\n::: {#ebcab834 .cell execution_count=66}\n``` {.python .cell-code}\ndf_reset = df.reset_index()\ndf_long = df_reset.melt(id_vars=['economy', 'series'], var_name='year', value_name='value')\ndf_long.pivot_table(index=['economy', 'year'], columns='series', values='value')\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>series</th>\n      <th>NY.GDP.PCAP.CD</th>\n      <th>SP.POP.TOTL</th>\n    </tr>\n    <tr>\n      <th>economy</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">ABW</th>\n      <th>2017</th>\n      <td>28440.051964</td>\n      <td>108735.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>30082.127645</td>\n      <td>108908.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>31096.205074</td>\n      <td>109203.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">AFE</th>\n      <th>2017</th>\n      <td>1520.212231</td>\n      <td>640058741.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>1538.901679</td>\n      <td>657801085.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">ZMB</th>\n      <th>2018</th>\n      <td>1463.899979</td>\n      <td>17973569.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>1258.986198</td>\n      <td>18513839.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">ZWE</th>\n      <th>2017</th>\n      <td>3448.086991</td>\n      <td>14812482.0</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>2271.852504</td>\n      <td>15034452.0</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>1683.913136</td>\n      <td>15271368.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>795 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Pandas中的分组计算（`groupby`）\n\nPandas 的分组（`groupby()`）方法按照“分割-应用-组合（split-apply-combine）”的原理，创建一个 groupby 对象，可以应用各种方法来聚合、转换或过滤数据。更多介绍参见Pandas官方文档[Group by: split-apply-combine](https://pandas.pydata.org/docs/user_guide/groupby.html)。\n\n选择合适的方法：\n\n- 如果你的操作只是简单的统计（如求和、平均值），优先使用聚合方法，它们通常效率最高。\n- 如果需要返回与原始 DataFrame 相同长度的结果，例如进行组内标准化，使用转换方法。\n- 如果需要根据组的属性来决定保留或丢弃整个组，使用过滤方法。\n- 当以上方法都无法满足需求时，或者需要执行更复杂的自定义逻辑时，使用**apply()**方法。\n\n#### 聚合方法（Aggregation Methods）\n\n聚合方法将每个组的数据压缩成一个单一的值，是最常用的`groupby`操作，例如`mean()`,`sum()`,`count()`,`size()`,`min()`,`max()`,`std()`,`var()`,`median()`等常见的统计量，或者`first()`,`last()`,`nth(n)`等获取第一个、最好一个或第n个值：\n\n\n**索引**\n\n例如，根据索引计算世界人口，先在索引上分组，然后使用`.sum()`函数：\n\n::: {#6d870731 .cell execution_count=67}\n``` {.python .cell-code}\npwt.groupby(level=1)['pop'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\nyear\n1950    1297.363356\n1951    1345.648916\n1952    1948.874249\n1953    2005.091897\n1954    2048.591355\n           ...     \n2015    7254.659556\n2016    7336.956076\n2017    7418.960776\n2018    7500.383052\n2019    7580.896719\nName: pop, Length: 70, dtype: float64\n```\n:::\n:::\n\n\n`avh`变量度量了“Average annual hours worked by persons engaged”,让我们分组计算平均，得到按年和按国家平均\n\n::: {#f1a3f0c2 .cell execution_count=68}\n``` {.python .cell-code}\navh = pwt[pwt['avh'].notna()]\nfig, ax = plt.subplots(2, 1, figsize=(12, 12))\navh.groupby(level=1)['avh'].mean().sort_values(ascending=False).plot(kind='line', ax=ax[0])\nax[0].set_xlabel(\"\")\nax[0].set_ylabel(\"Average annual hours worked by persons engaged\")\navh.groupby(level=0)['avh'].mean().sort_values(ascending=False)[:25].plot(kind='bar', ax=ax[1])\nax[1].set_xlabel(\"\")\nax[1].set_ylabel(\"Average annual hours worked by persons engaged\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_and_pandas_files/figure-html/cell-69-output-1.png){}\n:::\n:::\n\n\n最常见的是按变量进行分组，例如，按国家名`country`分组，最后一个观测值：\n\n::: {#90342a19 .cell execution_count=69}\n``` {.python .cell-code}\npwt.groupby(by=['country']).last()\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>cgdpe</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Albania</th>\n      <td>Lek</td>\n      <td>35890.019531</td>\n      <td>36103.042969</td>\n      <td>2.880917</td>\n      <td>1.075898</td>\n      <td>NaN</td>\n      <td>2.964992</td>\n      <td>33399.167969</td>\n      <td>40868.316406</td>\n      <td>35808.343750</td>\n      <td>...</td>\n      <td>0.126594</td>\n      <td>-0.313949</td>\n      <td>0.061145</td>\n      <td>0.473077</td>\n      <td>0.456882</td>\n      <td>0.235589</td>\n      <td>0.629832</td>\n      <td>0.525463</td>\n      <td>0.300975</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Algeria</th>\n      <td>Algerian Dinar</td>\n      <td>488952.375000</td>\n      <td>507487.562500</td>\n      <td>43.053054</td>\n      <td>11.273454</td>\n      <td>NaN</td>\n      <td>2.383965</td>\n      <td>365349.093750</td>\n      <td>518958.812500</td>\n      <td>487570.812500</td>\n      <td>...</td>\n      <td>0.136288</td>\n      <td>-0.135642</td>\n      <td>-0.030636</td>\n      <td>0.331240</td>\n      <td>0.512451</td>\n      <td>0.206330</td>\n      <td>0.519368</td>\n      <td>0.606340</td>\n      <td>0.327416</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Angola</th>\n      <td>Kwanza</td>\n      <td>228151.015625</td>\n      <td>227855.718750</td>\n      <td>31.825295</td>\n      <td>16.644962</td>\n      <td>NaN</td>\n      <td>1.481984</td>\n      <td>155943.718750</td>\n      <td>198750.421875</td>\n      <td>227771.609375</td>\n      <td>...</td>\n      <td>0.344351</td>\n      <td>-0.113983</td>\n      <td>-0.120470</td>\n      <td>0.438169</td>\n      <td>0.342872</td>\n      <td>0.240024</td>\n      <td>0.476486</td>\n      <td>0.611627</td>\n      <td>0.211084</td>\n      <td>0.396034</td>\n    </tr>\n    <tr>\n      <th>Anguilla</th>\n      <td>East Caribbean Dollar</td>\n      <td>376.634979</td>\n      <td>225.680527</td>\n      <td>0.014869</td>\n      <td>0.005348</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>438.470032</td>\n      <td>509.044983</td>\n      <td>375.136444</td>\n      <td>...</td>\n      <td>1.480300</td>\n      <td>-2.445801</td>\n      <td>-0.143354</td>\n      <td>1.064513</td>\n      <td>1.029199</td>\n      <td>0.732212</td>\n      <td>0.768944</td>\n      <td>0.602734</td>\n      <td>0.897989</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Antigua and Barbuda</th>\n      <td>East Caribbean Dollar</td>\n      <td>1986.163208</td>\n      <td>1603.854492</td>\n      <td>0.097118</td>\n      <td>0.038500</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1787.816772</td>\n      <td>2415.362061</td>\n      <td>1979.578003</td>\n      <td>...</td>\n      <td>0.029888</td>\n      <td>-0.609532</td>\n      <td>0.099326</td>\n      <td>0.899944</td>\n      <td>0.951402</td>\n      <td>0.519169</td>\n      <td>0.766929</td>\n      <td>0.571459</td>\n      <td>0.668208</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Venezuela (Bolivarian Republic of)</th>\n      <td>Bolivar Fuerte</td>\n      <td>7166.571777</td>\n      <td>7160.106934</td>\n      <td>28.515829</td>\n      <td>11.694400</td>\n      <td>1903.851607</td>\n      <td>2.893462</td>\n      <td>9266.067383</td>\n      <td>10055.498047</td>\n      <td>7167.786133</td>\n      <td>...</td>\n      <td>0.000002</td>\n      <td>-0.001072</td>\n      <td>-0.402837</td>\n      <td>18.143538</td>\n      <td>34.444988</td>\n      <td>14.175777</td>\n      <td>0.581305</td>\n      <td>0.645909</td>\n      <td>20.694918</td>\n      <td>12.002436</td>\n    </tr>\n    <tr>\n      <th>Viet Nam</th>\n      <td>Dong</td>\n      <td>750726.750000</td>\n      <td>724123.375000</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.062500</td>\n      <td>758821.937500</td>\n      <td>747853.750000</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-0.057305</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Yemen</th>\n      <td>Yemeni Rial</td>\n      <td>50052.933594</td>\n      <td>51828.058594</td>\n      <td>29.161922</td>\n      <td>5.531877</td>\n      <td>NaN</td>\n      <td>1.842989</td>\n      <td>49266.472656</td>\n      <td>67992.531250</td>\n      <td>49937.042969</td>\n      <td>...</td>\n      <td>0.000723</td>\n      <td>-0.135297</td>\n      <td>-0.173392</td>\n      <td>0.777612</td>\n      <td>0.238807</td>\n      <td>0.211786</td>\n      <td>0.632594</td>\n      <td>0.670528</td>\n      <td>0.174729</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Zambia</th>\n      <td>Kwacha</td>\n      <td>57956.183594</td>\n      <td>56783.714844</td>\n      <td>17.861030</td>\n      <td>5.225448</td>\n      <td>NaN</td>\n      <td>2.686845</td>\n      <td>38698.402344</td>\n      <td>56536.863281</td>\n      <td>57695.066406</td>\n      <td>...</td>\n      <td>0.215397</td>\n      <td>-0.238961</td>\n      <td>0.028391</td>\n      <td>0.373077</td>\n      <td>0.482041</td>\n      <td>0.330470</td>\n      <td>0.574416</td>\n      <td>0.531915</td>\n      <td>0.295188</td>\n      <td>0.360382</td>\n    </tr>\n    <tr>\n      <th>Zimbabwe</th>\n      <td>US Dollar</td>\n      <td>42296.062500</td>\n      <td>40826.570312</td>\n      <td>14.645468</td>\n      <td>6.831017</td>\n      <td>NaN</td>\n      <td>2.713408</td>\n      <td>43961.839844</td>\n      <td>47128.785156</td>\n      <td>42325.117188</td>\n      <td>...</td>\n      <td>0.213562</td>\n      <td>-0.270959</td>\n      <td>-0.089798</td>\n      <td>0.494755</td>\n      <td>0.652439</td>\n      <td>0.500927</td>\n      <td>0.487763</td>\n      <td>0.430082</td>\n      <td>0.419883</td>\n      <td>1.580885</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 49 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### 转换方法（Transformation Methods）\n\n- `transform(func)`: 对每个组应用函数，并将结果广播回原始 DataFrame 的形状。\n- `rank(method='average')`: 计算组内排名。\n- `fillna(value)`: 在组内填充缺失值。\n\n::: {#1fa44f76 .cell execution_count=70}\n``` {.python .cell-code}\navh.groupby(level=1)['avh'].transform('mean')\navh.groupby(level=1)['avh'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\nyear\n1950    2171.439158\n1951    2190.832106\n1952    2181.242069\n1953    2183.205302\n1954    2179.603764\n           ...     \n2015    1865.220762\n2016    1871.137771\n2017    1858.542897\n2018    1854.065910\n2019    1849.981084\nName: avh, Length: 70, dtype: float64\n```\n:::\n:::\n\n\n注意，转换与聚合的区别,转换将生成的值与原数据观测值一样多，这里是3492个，而聚合只有70个。\n\n`.transform()`方法可以与`lambda`函数相结合，例如：\n\n::: {#4a9e2797 .cell execution_count=71}\n``` {.python .cell-code}\npwt.select_dtypes(np.number).groupby(level=0).transform(lambda x: (x - x.mean())/x.std())\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>cgdpe</th>\n      <th>cgdpo</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ABW</th>\n      <th>1950</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1951</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1952</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1953</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1954</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">ZWE</th>\n      <th>2015</th>\n      <td>0.557612</td>\n      <td>0.538962</td>\n      <td>1.363168</td>\n      <td>1.481502</td>\n      <td>NaN</td>\n      <td>1.684506</td>\n      <td>1.065064</td>\n      <td>0.878946</td>\n      <td>0.568115</td>\n      <td>0.518456</td>\n      <td>...</td>\n      <td>0.573238</td>\n      <td>-1.555246</td>\n      <td>-0.255119</td>\n      <td>0.529681</td>\n      <td>1.749130</td>\n      <td>2.268319</td>\n      <td>1.207733</td>\n      <td>0.980568</td>\n      <td>1.694797</td>\n      <td>-0.574098</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>0.653705</td>\n      <td>0.602805</td>\n      <td>1.422588</td>\n      <td>1.547890</td>\n      <td>NaN</td>\n      <td>1.752335</td>\n      <td>1.007497</td>\n      <td>0.829250</td>\n      <td>0.663904</td>\n      <td>0.595112</td>\n      <td>...</td>\n      <td>0.494790</td>\n      <td>-1.255079</td>\n      <td>0.076671</td>\n      <td>0.502201</td>\n      <td>1.747821</td>\n      <td>2.254739</td>\n      <td>1.223349</td>\n      <td>0.905110</td>\n      <td>1.640276</td>\n      <td>-0.603384</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>0.808743</td>\n      <td>0.786654</td>\n      <td>1.479408</td>\n      <td>1.612345</td>\n      <td>NaN</td>\n      <td>1.820993</td>\n      <td>1.177133</td>\n      <td>0.993953</td>\n      <td>0.830524</td>\n      <td>0.783048</td>\n      <td>...</td>\n      <td>0.445374</td>\n      <td>-0.856577</td>\n      <td>-0.143192</td>\n      <td>0.511544</td>\n      <td>1.690031</td>\n      <td>2.107590</td>\n      <td>1.223093</td>\n      <td>1.085555</td>\n      <td>1.633616</td>\n      <td>-0.587231</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>0.789505</td>\n      <td>0.737542</td>\n      <td>1.535110</td>\n      <td>1.674266</td>\n      <td>NaN</td>\n      <td>1.890490</td>\n      <td>1.182212</td>\n      <td>1.005163</td>\n      <td>0.812158</td>\n      <td>0.742264</td>\n      <td>...</td>\n      <td>0.614240</td>\n      <td>-1.357370</td>\n      <td>0.034511</td>\n      <td>0.736143</td>\n      <td>1.770227</td>\n      <td>2.181716</td>\n      <td>1.331997</td>\n      <td>1.138501</td>\n      <td>1.701857</td>\n      <td>-0.543242</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>0.677034</td>\n      <td>0.595315</td>\n      <td>1.592041</td>\n      <td>1.743921</td>\n      <td>NaN</td>\n      <td>1.960838</td>\n      <td>1.047783</td>\n      <td>0.868337</td>\n      <td>0.699789</td>\n      <td>0.606955</td>\n      <td>...</td>\n      <td>1.270920</td>\n      <td>-1.417482</td>\n      <td>-0.607332</td>\n      <td>0.579359</td>\n      <td>1.754938</td>\n      <td>1.965274</td>\n      <td>0.558390</td>\n      <td>0.404721</td>\n      <td>1.644073</td>\n      <td>-0.691219</td>\n    </tr>\n  </tbody>\n</table>\n<p>12810 rows × 43 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### 过滤方法（Filtration Methods）\n\n过滤方法会根据每个组的某个条件来排除整个组。\n\n- filter(func): 根据一个返回布尔值的函数来过滤组。如果函数对一个组返回 True，则保留该组；否则，删除该组。\n\n::: {#a3f28749 .cell execution_count=72}\n``` {.python .cell-code}\npwt.groupby(level=0).filter(lambda x: x['pop'].mean() > 50)\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>country</th>\n      <th>currency_unit</th>\n      <th>rgdpe</th>\n      <th>rgdpo</th>\n      <th>pop</th>\n      <th>emp</th>\n      <th>avh</th>\n      <th>hc</th>\n      <th>ccon</th>\n      <th>cda</th>\n      <th>...</th>\n      <th>csh_x</th>\n      <th>csh_m</th>\n      <th>csh_r</th>\n      <th>pl_c</th>\n      <th>pl_i</th>\n      <th>pl_g</th>\n      <th>pl_x</th>\n      <th>pl_m</th>\n      <th>pl_n</th>\n      <th>pl_k</th>\n    </tr>\n    <tr>\n      <th>countrycode</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">BGD</th>\n      <th>1950</th>\n      <td>Bangladesh</td>\n      <td>Taka</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1951</th>\n      <td>Bangladesh</td>\n      <td>Taka</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1952</th>\n      <td>Bangladesh</td>\n      <td>Taka</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1953</th>\n      <td>Bangladesh</td>\n      <td>Taka</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1954</th>\n      <td>Bangladesh</td>\n      <td>Taka</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">VNM</th>\n      <th>2015</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>561821.1875</td>\n      <td>572777.5000</td>\n      <td>92.677076</td>\n      <td>52.840004</td>\n      <td>2191.370436</td>\n      <td>2.669350</td>\n      <td>443934.56250</td>\n      <td>574238.5625</td>\n      <td>...</td>\n      <td>0.442469</td>\n      <td>-0.439203</td>\n      <td>-0.000265</td>\n      <td>0.336687</td>\n      <td>0.410447</td>\n      <td>0.227190</td>\n      <td>0.635741</td>\n      <td>0.655327</td>\n      <td>0.257087</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>601767.5625</td>\n      <td>596363.1250</td>\n      <td>93.640422</td>\n      <td>53.302799</td>\n      <td>2169.551504</td>\n      <td>2.716025</td>\n      <td>473113.40625</td>\n      <td>610603.4375</td>\n      <td>...</td>\n      <td>0.462526</td>\n      <td>-0.451460</td>\n      <td>-0.024112</td>\n      <td>0.337684</td>\n      <td>0.396817</td>\n      <td>0.236729</td>\n      <td>0.633399</td>\n      <td>0.643034</td>\n      <td>0.244760</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>653410.8125</td>\n      <td>647224.9375</td>\n      <td>94.600648</td>\n      <td>53.703396</td>\n      <td>2131.968232</td>\n      <td>2.764934</td>\n      <td>507151.37500</td>\n      <td>660755.8750</td>\n      <td>...</td>\n      <td>0.516055</td>\n      <td>-0.517211</td>\n      <td>-0.019750</td>\n      <td>0.340993</td>\n      <td>0.387264</td>\n      <td>0.240045</td>\n      <td>0.644062</td>\n      <td>0.636934</td>\n      <td>0.242858</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2018</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>705553.3750</td>\n      <td>689643.4375</td>\n      <td>95.545962</td>\n      <td>54.069103</td>\n      <td>2131.968232</td>\n      <td>2.816210</td>\n      <td>543525.25000</td>\n      <td>708143.1875</td>\n      <td>...</td>\n      <td>0.522278</td>\n      <td>-0.519110</td>\n      <td>-0.033603</td>\n      <td>0.346216</td>\n      <td>0.395235</td>\n      <td>0.244325</td>\n      <td>0.678972</td>\n      <td>0.663970</td>\n      <td>0.245893</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2019</th>\n      <td>Viet Nam</td>\n      <td>Dong</td>\n      <td>750726.7500</td>\n      <td>724123.3750</td>\n      <td>96.462106</td>\n      <td>50.399563</td>\n      <td>2131.968232</td>\n      <td>2.869998</td>\n      <td>582677.06250</td>\n      <td>758821.9375</td>\n      <td>...</td>\n      <td>0.526032</td>\n      <td>-0.518066</td>\n      <td>-0.057305</td>\n      <td>0.347591</td>\n      <td>0.399158</td>\n      <td>0.245056</td>\n      <td>0.695617</td>\n      <td>0.676502</td>\n      <td>0.249708</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1260 rows × 50 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### 应用方法（Application Methods）\napply() 方法是最通用的方法，它允许你对每个组应用任何自定义函数。这个函数可以执行聚合、转换或过滤操作，或者任何更复杂的逻辑。\n\n- apply(func): 将一个自定义函数应用于每个组。函数的返回值可以是 Series、DataFrame 或标量。\n\n",
    "supporting": [
      "numpy_and_pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}