{
  "hash": "0cfa7b52f2dc8f0ff57c3ff5c7de1b19",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python 语言基础\n---\n\n\n\n这一部分简要介绍Python语言的基本内容，包括变量的类型、条件语句、循环、自定义函数和类等内容。\n\n## 变量与数据类型\n\n变量是用来存储数据的“容器”，可以赋不同类型的值。Python常见数据类型有：整数(int)、浮点数(float)、字符串(str)、布尔(bool)等。\n\n### 变量赋值\n\n变量赋值把一个具体的值存储到一个变量中，方便后续使用和操作。要注意变量命名的规则：\n\n  - 变量名只能包含字母、数字和下划线，且不能以数字开头\n  - 区分大小写（如：age 和 Age 是不同变量）\n  - 不可使用Python关键字作为变量名（如：`if`, `for`, `class` 等）\n  - 建议使用有意义的英文单词，遵循小写加下划线的风格。\n\n例如 \n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nschool = \"Nanjing Normal University\"\nprice = 12.5\nquantity = 20\ntotal_sales = price * quantity\ntotal_sales\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n250.0\n```\n:::\n:::\n\n\n如果命名方式不符合要求，软件将返回错误。将下面例子中表示注释的`#`去掉，再试运行命令，看提示的错误类型是什么？\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#1student = \"Bob\"      \n# class = \"Math\"       \n# student-name = \"Tom\" \n# t&2 = 30             \n```\n:::\n\n\n上面的`class`，属于软件内部保留的33个关键词之一，注意在命名时应避免与关键词冲突：\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport keyword\nprint(keyword.kwlist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n```\n:::\n:::\n\n\n### Python基本数据类型\n\n下面是几种常用的基本数据类型，可以通过`type()`函数查看一个对象的类型。\n\n**整数**（int）：用于表示整数类型的数据。\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\na = 5\nprint(type(a))  \n#\nb = 10\nc = b/a\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n2.0\n```\n:::\n:::\n\n\n注意两个整数的比值为浮点数。\n\n整数`int`是类（class）的一种。在Python中，所有的数据类型，包括数字、字符串、列表等，都是通过类来定义的。如果我们输入变量的名字和一个点，`a.`，Python会出现提示可能的属性（attributes）或方法（methods）。\n\n![整数的属性和方法](images/integer_method.png){#fig-integer_methods}\n\n例如，`.is_integer()`判断数值是否为整数，`.as_integer_ratio()`返回一对整数，其比率与原始整数完全相等，且具有正数分母:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\na.is_integer()\na.as_integer_ratio()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(5, 1)\n```\n:::\n:::\n\n\n**浮点数**（float）：用于表示带小数点的数值\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npi = 3.14159\nradius = 1.75\narea = pi * radius **2\nprint(type(pi))    \nprint(area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'float'>\n9.621119375\n```\n:::\n:::\n\n\n**字符串**（str）：用于表示文本数据\n\n可以用双引号或者 单引号定义字符串。当字符串较长时，可以用三引号进行定义。例如：\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsentence = \"Python's syntax is easy to learn.\"\nmultiline = \"\"\"这个句子\n被我\n分成了几行。这样\n看起来，像诗一样。\n\"\"\"\n```\n:::\n\n\n字符串有许多属性和方法，在进行文本分析时会经常用到。如 @tbl-string-methods 所示：\n\n| 方法 | 功能说明 | 示例 |\n|------|-----------|------|\n| `s.lower()` | 转换为小写 | `\"Hello\".lower()` → `\"hello\"` |\n| `s.upper()` | 转换为大写 | `\"hello\".upper()` → `\"HELLO\"` |\n| `s.capitalize()` | 首字母大写，其余小写 | `\"hello world\".capitalize()` → `\"Hello world\"` |\n| `s.title()` | 每个单词首字母大写 | `\"hello world\".title()` → `\"Hello World\"` |\n| `s.strip()` | 去除字符串首尾空白字符 | `\"  hello  \".strip()` → `\"hello\"` |\n| `s.lstrip()` | 去除左侧空白 | `\"  hello\".lstrip()` → `\"hello\"` |\n| `s.rstrip()` | 去除右侧空白 | `\"hello  \".rstrip()` → `\"hello\"` |\n| `s.replace(old, new)` | 替换子串 | `\"banana\".replace(\"a\", \"o\")` → `\"bonono\"` |\n| `s.find(sub)` | 查找子串位置，找不到返回 `-1` | `\"hello\".find(\"l\")` → `2` |\n| `s.count(sub)` | 统计子串出现次数 | `\"banana\".count(\"a\")` → `3` |\n| `s.startswith(prefix)` | 是否以指定前缀开头 | `\"hello\".startswith(\"he\")` → `True` |\n| `s.endswith(suffix)` | 是否以指定后缀结尾 | `\"hello\".endswith(\"lo\")` → `True` |\n| `s.split(sep)` | 按分隔符拆分字符串 | `\"a,b,c\".split(\",\")` → `[\"a\", \"b\", \"c\"]` |\n| `sep.join(iterable)` | 使用分隔符连接字符串序列 | `\",\".join([\"a\", \"b\", \"c\"])` → `\"a,b,c\"` |\n\n: 常见的字符串方法 {#tbl-string-methods}\n\n注意，当对字符串使用某一方法时，虽然结果显示了变化，并没有改变原本对字符串。如果要保存结果可以赋值。\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# 例：将日期字符串按“-”分割成年、月、日\ndate_str = \"2024-06-01\"\nparts = date_str.split(\"-\")\nyear, month, day = parts\nprint(f\"年份：{year}，月份：{month}，日期：{day}\")\n\n# 例：用join方法将列表中的单词拼接成一句话\nwords = [\"Python\", \"is\", \"fun\"]\nsentence = \"$#$_\".join(words)\nprint(sentence) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n年份：2024，月份：06，日期：01\nPython$#$_is$#$_fun\n```\n:::\n:::\n\n\n**布林类型**（bool）：只有True和False两个值，常用于条件判断\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nname = \"Jane\"\nage = 20\nscore = 57\nis_adult = age >= 18\nhas_passed = score >= 60\n\nprint(type(is_adult))  # <class 'bool'>\nprint(f\"是否成年：{is_adult}\")\nprint(f\"是否及格：{has_passed}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bool'>\n是否成年：True\n是否及格：False\n```\n:::\n:::\n\n\n## `print`与 f-string\n\n经常需要将运算结果或字符串显示出来，主要的函数是上面已经出现多次的`print()`函数，它可以输出字符串、变量、表达式等，并支持格式化输出。\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(multiline)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n这个句子\n被我\n分成了几行。这样\n看起来，像诗一样。\n\n```\n:::\n:::\n\n\n### 带引号的字符\n\n在Python语言中，字符可以使用单引号或者双引号表示，在输出带引号的字符串时，可以利用该特点。例如\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint('She said, \"Hello!\"')      # 外单内双\nprint(\"It's a nice day.\")        # 外双内单\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShe said, \"Hello!\"\nIt's a nice day.\n```\n:::\n:::\n\n\n如果字符串本身包含同样的引号，可以用转义符\"`\\`\"避免冲突\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint('It\\'s a nice day.') \nprint(\"She said, \\\"Hello!\\\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIt's a nice day.\nShe said, \"Hello!\"\n```\n:::\n:::\n\n\n三引号可以包含单双引号和多行内容\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(\"\"\"他说：\"It's OK!\" \"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n他说：\"It's OK!\" \n```\n:::\n:::\n\n\n### 格式化输出\n\n格式化输出常用的有`.format()方法和f-string方法。\n\n**format**方法\n\n`.format()`方法的基本用法如下：\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe are the knights who say \"Ni!\"\n```\n:::\n:::\n\n\n也可以使用关键字参数：\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint('This {food} is {adjective}.'.format(\n      food='spam', adjective='absolutely horrible'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis spam is absolutely horrible.\n```\n:::\n:::\n\n\n**f-string**\n\n\nf-string（格式化字符串字面量）是 Python 3.6 及以上版本提供的一种字符串格式化方式，它让我们可以在字符串中直接嵌入变量或表达式。\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nimport math\nprint(f'The value of pi is approximately {math.pi:.3f}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value of pi is approximately 3.142.\n```\n:::\n:::\n\n\n其中，`.3f`表示小数点3位；\n\n输出结果时也可以进行数学运算：\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nyear = 2024\nGDP_per_capita = 95749\ngrowth = 0.051\n\nmy_string = f\"{year}年，人均国内生产总值为{GDP_per_capita/10000:.3f}万元，比去年增长{growth:.3%}\"\nprint(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024年，人均国内生产总值为9.575万元，比去年增长5.100%\n```\n:::\n:::\n\n\n注意 `%`将浮点数转换位百分数显示。\n\n## 运算符与表达式\n\n运算符用于对数据进行各种操作，主要包括：\n\n- 算术运算符：`+`（加），`-`（减），`*`（乘），`/`（除），`//`（整除），`%`（取余），`**`（幂）\n- 比较运算符：`==`（等于），`!=`（不等于），`>`（大于），`<`（小于），`>=`（大于等于），`<=`（小于等于）\n- 逻辑运算符：`and`（与），`or`（或），`not`（非）\n- 赋值运算符：`=`（赋值），`+=`，`-=`，`*=`，`/=` 等\n- 成员运算符：`in`，`not in`（判断元素是否属于序列）\n- 身份运算符：`is`，`is not`（判断两个对象是否为同一对象）\n\n下面分别介绍常用的运算符及其用法。\n\n### 算术运算符\n\n加减乘除等算术运算符与通常的表示方法类似，例如，将华氏度转换位摄氏度的公式为：\n\n例如，华氏温度和摄氏温度的转换公式：\n\n$$\n{}^{\\circ}C = \\frac{5}{9}({}^{\\circ}F - 32)\n$$\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nF = 92\nC = 5/9 * (F - 32)\nprint(f\"F = {F}, C = {C:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nF = 92, C = 33.33\n```\n:::\n:::\n\n\n值得注意的是`//`（整除），`%`（取余），`**`（幂）：\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\na = 15\nb = 4\nprint(a/b)\nprint(\"a // b =\", a // b)  \nprint(\"a % b =\", a % b)    \nprint(\"a ** b =\", a ** b)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.75\na // b = 3\na % b = 3\na ** b = 50625\n```\n:::\n:::\n\n\n### 比较运算符\n\n比较运算符用于比较两个值，结果为布尔类型（`True`或 `False` ）。\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nprint(\"a > b:\", a > b)\nprint(\"a == b:\", a == b)   \nprint(\"a != b:\", a != b)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\na > b: True\na == b: False\na != b: True\n```\n:::\n:::\n\n\n### 逻辑运算符\n\n逻辑运算符用于连接多个条件表达式，常用于复合条件判断。\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nx = 8\ny = 3\n#\nprint((x > 5) and (y < 5))  \nprint((x < 5) or (y < 5))   \nprint(not (x > y))          \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nFalse\n```\n:::\n:::\n\n\n要注意`and` 和`or`组合的结果。\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nprint(True and False)\nprint(True or False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n```\n:::\n:::\n\n\n### 赋值运算符\n\n赋值运算符用于给变量赋值或在原有基础上进行运算后赋值:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nx = 10      \nx += 5   \nx -= 3   \nx *= 2   \nx /= 4   \nx //= 2  \nx %= 2   \nx **= 3  \n#\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n```\n:::\n:::\n\n\n### 成员运算符\n\n成员运算符用于判断某个元素是否属于某个序列，如列表、元组、字符串等。例如：\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprint('is' in 'this')\n\nfor i in range(5):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n## 控制结构：条件与循环\n\n### 条件语句\n\n条件语句（if语句）用于根据条件判断执行不同的代码块，基本结构：\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# if 条件:\n#     代码块1\n# elif 其他条件:\n#     代码块2\n# else:\n#     代码块3\n```\n:::\n\n\n例如，使用`if-esle`判断是奇数还是偶数。注意缩进：\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nnum = 8\nif num%2 == 0:\n    print(f\"{num} is even.\")\nelse:\n    print(f\"{num} is odd.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8 is even.\n```\n:::\n:::\n\n\n以世界银行经济体收入分组标准为例：\n\n[世界银行](https://blogs.worldbank.org/zh/opendata/world-bank-country-classifications-by-income-level-for-2024-2025)按照人均国民收入把世界各经济体分成四组，如 @tbl-worldbankincome 所示，中、低收入国家被称为发展中国家，高收入国家被称为发达国家。\n\n| 经济体分组           | 划分标准（人均国民总收入）     |\n|----------------------|-------------------------------|\n| 低收入经济体         | 1145 美元以下                 |\n| 中等偏下收入经济体   | 1146—4515 美元               |\n| 中等偏上收入经济体   | 4516—14005 美元              |\n| 高收入经济体         | 14005 美元以上               |\n\n: 世界银行经济体收入分组标准 {#tbl-worldbankincome}\n\n可以使用嵌套条件语句`if-elif-else`来进行判别：\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ngni = 13660\n\nif gni <= 1135:\n    economy = \"低收入经济体\"\nelif gni <= 4465:\n    economy =  \"中等偏下收入经济体\"\nelif gni <= 13845:\n    economy = \"中等偏上收入经济体\"\nelse:\n    economy = \"高收入经济体\"\n\nprint(f\"人均国民总收入为 {gni} 美元，属于：{economy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n人均国民总收入为 13660 美元，属于：中等偏上收入经济体\n```\n:::\n:::\n\n\n再来看一个计算BMI（Body Mass Index）指数的例子：\n$$\nBMI = \\frac{weight(kg)}{height(m)^{2}}\n$$\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nheight = 1.75 \nweight = 75 \n\n# 计算BMI\nbmi = weight / (height ** 2)\n\nif bmi < 18.5:\n    status = \"偏瘦\"\nelif bmi < 24:\n    status = \"正常\"\nelif bmi < 28:\n    status = \"超重\"\nelse:\n    status = \"肥胖\"\nprint(f\"BMI = {bmi:.2f}，{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = 24.49，超重\n```\n:::\n:::\n\n\n### 循环\n\nPython 中主要有两种循环结构：for 循环和 while 循环。\nfor 循环用于遍历序列（如列表、字符串、元组等）或可迭代对象中的元素，而 while 循环则在给定条件为真时重复执行一段代码。\n\n例如，对列表中的元素循环：\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n```\n:::\n:::\n\n\n下面的例子计算从1到100之和，注意`range()`函数的用法：\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntotal = 0\nfor i in range(1, 101):\n    total += i\nprint(\"1到100的和为：\", total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1到100的和为： 5050\n```\n:::\n:::\n\n\nwhile循环是一种基于条件判断的循环结构，当条件为True时，循环体会反复执行，直到条件变为False为止。另外，\nwhile循环要注意循环变量的更新，否则可能会造成死循环。\n\n例如，同样计算1到100的和\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ntotal = 0\nn = 1\nwhile n <= 100:\n    total += n\n    n += 1\nprint(\"1到100的和为：\", total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1到100的和为： 5050\n```\n:::\n:::\n\n\n## 容器类型：列表、字典、元组、集合\n\n列表（list）、字典（dict）、元组（tuple）、集合（set）是Python中常用的容器类型。\n\n- 字典：用{}定义，键值对结构\n- 元组：用()定义，有序不可变\n- 集合：用set()或{}定义，无序不重复\n\n### 列表\n\n列表是最常用的数据类型之一，新建列表用`[]`进行定义。可以用索引（从0开始）访问列表的元素。\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nnumbers = [10, 20, 30, 40]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nprint(numbers[0])\nprint(fruits[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\ncherry\n```\n:::\n:::\n\n\n可以根据索引使用`:`对列表进行切片（slicing）。\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nprint(numbers[1:3])     \nprint(numbers[::-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[20, 30]\n[40, 30, 20, 10]\n```\n:::\n:::\n\n\n列表是可变的（mutatable），元素可以更改。例如，将`numbers`的第2个元素（索引1）的值替换为25：\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nnumbers[1] = 25\nprint(numbers)         \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 25, 30, 40]\n```\n:::\n:::\n\n\n可以使用`.append()`、`.insert()`方法往列表添加元素:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nfruits.append(\"orange\")  \nfruits.insert(1, \"pear\") \nprint(fruits)                 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apple', 'pear', 'banana', 'cherry', 'orange']\n```\n:::\n:::\n\n\n`del` `.remove()`和`.pop()`都可以用来删除元素：\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndel numbers[2]                 # 按索引删除\nfruits.remove(\"banana\")        # 按值删除\nprint(numbers)                 \nprint(fruits)                  \nfruit = fruits.pop()\nprint(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 25, 40]\n['apple', 'pear', 'cherry', 'orange']\norange\n```\n:::\n:::\n\n\n经常涉及遍历列表的操作，尤其是`for`循环：\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nfor fruit in fruits:\n    print(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\npear\ncherry\n```\n:::\n:::\n\n\n**例：计算净现值**\n\n如果某项资产在多个时间周期内支付一系列收益流，那么我们可以使用**贴现率**来计算这整个收益序列对消费者的当前价值。\n用 $y_t$ 表示第 $t$ 期的收益，**并假设这些收益现在是已知的**，贴现率 $r\\ge 0$。用一个求和表达式来表示整条收益序列的净现值总价值：\n\n$$\nP_{0} = \\sum_{t=0}^{T} (\\frac{1}{1+r})^{t}y_{t}\n$$\n\n将假设的收益序列保存为列表： `y = [-100, 30, 60, 50, 40]`，贴现率假设为0.05。我们用遍历列表的方法求和：\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ny = [-100, 30, 60, 50, 40]\nr = 0.05\nP0 = 0\nfor t in range(len(y)):\n    P0 = P0 + y[t] / (1 + r) ** t\nprint(f\"The Total Present Value = ：{P0:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Total Present Value = ：59.09\n```\n:::\n:::\n\n\n### 元组\n元组（tuple）是有序、不可变的元素集合，用()表示。\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\npoint = (3, 4)\ncolors = (\"red\", \"green\", \"blue\")\n\n# 访问元素\nprint(point[0])                # 3\nprint(colors[-1])              # blue\n\n# 元组不可修改\n# point[1] = 5  # 会报错\n\n# 单元素元组要加逗号\nsingle = (5,)\nprint(type(single))            # <class 'tuple'>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\nblue\n<class 'tuple'>\n```\n:::\n:::\n\n\n元组可以用于多变量赋值，许多函数返回的结果是元组的形式。\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nx, y = point\nprint(x, y) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 4\n```\n:::\n:::\n\n\n**例：Jarque-Bera 正态性检验**\n\n给定 $n$个观测值的样本，样本偏度为：\n$$\nS = \\frac{\\hat{\\mu}_{3}}{\\hat{\\sigma}^{3}} = \\frac{\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{3}}{(\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{2})^{3/2}}\n$$\n\n样本峰度为：\n$$\nK = \\frac{\\hat{\\mu}_{4}}{\\hat{\\sigma}^{4}} = \\frac{\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{4}}{(\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\bar{x})^{2})^{2}}\n$$\n\nJarque-Bera正态性检验的核心思想是，如果一个数据集服从正态分布，那么它的偏度和峰度应该分别接近于0和3。统计量定义为：\n$$\nJarque-Bera = \\frac{n}{6}\\left(S^{2} + \\frac{1}{4}(K - 3)^{2}\\right)\n$$\n\n我们用Scipy库的`stats.jarque_bera()`函数为例:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nimport scipy.stats as sc\nimport numpy as np\nnp.random.seed(123)\nx = np.random.normal(loc=0, scale=1, size=100)\n\ns, p = sc.jarque_bera(x=x)\nprint(f\"Jarque-Berat Statistics = {s:.3f}, p-value = {p:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJarque-Berat Statistics = 1.734, p-value = 0.420\n```\n:::\n:::\n\n\n### 字典\n\n字典（dict）是一种用于存储键值对的数据结构。每个元素由“键”（key）和“值”（value）组成，键必须唯一且不可变，值可以是任意类型。\n字典用大括号{}表示，键和值之间用冒号:分隔，多个键值对之间用逗号，分隔。\n\n例如，下面是江苏省2023年的一些社会经济指标：\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\njiangsu = {\"population\": 8526,\n           \"employment\": 4840,\n           \"GDP\": 128222.16}\nprint(jiangsu)\nprint(jiangsu[\"population\"])   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'population': 8526, 'employment': 4840, 'GDP': 128222.16}\n8526\n```\n:::\n:::\n\n\n可以很方便地往字典中添加或修改元素\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\njiangsu['capital city'] = \"Nan jing\"\nprint(jiangsu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'population': 8526, 'employment': 4840, 'GDP': 128222.16, 'capital city': 'Nan jing'}\n```\n:::\n:::\n\n\n可以使用for循环 遍历字典，\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nfor key, value in jiangsu.items():\n    print(key, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npopulation 8526\nemployment 4840\nGDP 128222.16\ncapital city Nan jing\n```\n:::\n:::\n\n\n**应用：利用字典进行词频统计**\n\n统计一段文本中每个单词出现的次数，例如统计下面英文歌词代词出现的次数。首先将字母转化为小写字母，然后利用字符的切分方法`.split()`，将结果保存在字典`freq`之中，然后按词频排序，注意使用了lambda函数的方法。\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ntext = \"\"\"Generals gathered in their masses\nJust like witches at black masses\nEvil minds that plot destruction\nSorcerer of death's construction\nIn the fields, the bodies burning\nAs the war machine keeps turning\nDeath and hatred to mankind\nPoisoning their brainwashed minds\nOh, Lord, yeah\nPoliticians hide themselves away\nThey only started the war\nWhy should they go out to fight?\nThey leave that role to the poor, yeah\nTime will tell on their power minds\nMaking war just for fun\nTreating people just like pawns in chess\nWait 'til their judgement day comes, yeah\nNow in darkness, world stops turning\nAshes where their bodies burning\nNo more war pigs have the power\nHand of God has struck the hour\nDay of judgement, God is calling\nOn their knees, the war pigs crawling\nBegging mercy for their sins\nSatan laughing, spreads his wings\nOh, Lord, yeah\n\"\"\"\n\nwords = text.lower().split()\nfreq = {}\n\nfor word in words:\n    if word in freq:         # 判断单词是否已在字典中\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\nsorted_freq = sorted(freq.items(), \n                      key=lambda item: item[1], \n                      reverse=True)\n\nfor word, count in sorted_freq[:10]:\n    print(f\"{word}: {count}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe: 8\ntheir: 7\nwar: 5\nin: 4\nyeah: 4\njust: 3\nminds: 3\nof: 3\nto: 3\nthey: 3\n```\n:::\n:::\n\n\n## 函数与模块\n\n### 内置函数的调用\nPython内置函数是系统自带的、可以直接使用的函数，无需导入模块。常见内置函数有：`abs()`, `len()`,`max()`, `min()`, `sum()`, `type()`, `int()`, `float()`, `str()`, `list()`, `dict()`, `range()` 等。\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nprint(abs(-10))\nlst = [1, 2, 3, 4]\nprint(len(lst))\nprint(max(5, 8, 2))\nprint(min([7, 3, 9]))\n\nprint(sum([1, 2, 3]))    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n4\n8\n3\n6\n```\n:::\n:::\n\n\n### 自定义函数\n\n自定义函数使用def关键字，指定函数名、参数列表和函数体。下面是几个简单的自定义函数的例子。\n\n例如，定义一个不包含参数的函数`print_hello()`，其唯一作用是显示`Hello World!`：\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\ndef print_hello():\n    print(\"Hello World!\")\n\nprint_hello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n函数通常带有参数，下面的例子定义了一个计算圆的面积的例子，需要输入参数半径`radius`的值：\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nimport math\ndef area(radius):\n    res = math.pi * radius ** 2\n    print(f\"半径为 {radius} 的圆的面积为 {res:.2f}!\")\narea(radius=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n半径为 2 的圆的面积为 12.57!\n```\n:::\n:::\n\n\n这个函数运行的结果是在屏幕上显示一行字。如果将运行结果赋值给变量，结果如何？\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nres = area(radius=2)\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n半径为 2 的圆的面积为 12.57!\nNone\n```\n:::\n:::\n\n\n看到结果显示的是`None`。原因在于函数定义时并没有返回结果，这就需要`return`结果：\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nimport math\ndef area(radius):\n    return math.pi * radius ** 2\n\nradius = 2\nres = area(radius)\nprint(f\"半径为 {radius} 的圆的面积为 {res:.2f}!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n半径为 2 的圆的面积为 12.57!\n```\n:::\n:::\n\n\n再例如，给定列表中都是数值，计算其平均数：\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    avg = total / N\n\n    return avg\nnums = [3, 8, 1, 6]\nprint(mean(nums))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.5\n```\n:::\n:::\n\n\n定义的函数经常会带有默认参数值，在调用函数时可以省略输入参数。例如下面的Cobb-Douglas生产函数的例子。\n\n**例：定义Cobb-Douglas函数**\n\nCobb-Douglas生产函数是经济学中最常见的函数设定，例如一个规模报酬不变的CD函数表示为：\n$$\nY = AK^{\\alpha}L^{1-\\alpha}\n$$\n\n其中，$\\alpha$ 表示资本的产出弹性，$A$ 表示全要素生产率。下面定义一个CD函数，默认参数值 $\\alpha = 1/3, A = 1$。\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef cobb_douglas(K, L, alpha = 1/3, A = 1):\n    output = A * K**alpha * L**(1 - alpha)\n    return output\ncobb_douglas(K=1, L=0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n0.6299605249474366\n```\n:::\n:::\n\n\n从微观经济学内容我们知道，等产量曲线是带来相同产出的要素组合 $(K, L)$ 形成的曲线，可以应用matplotlib中的`contour`函数绘制上面函数定义的等产量曲线：\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\n# 生成K和L的网格\nK = np.linspace(0.1, 2, 100)\nL = np.linspace(0.1, 2, 100)\nK_grid, L_grid = np.meshgrid(K, L)\n\nY = cobb_douglas(K_grid, L_grid, alpha=1/2)\n# \nfig, ax = plt.subplots(figsize=(8, 6), dpi=300)\ncontours = ax.contour(K_grid, L_grid, Y, levels=8, cmap='viridis')\nax.clabel(contours, inline=True, fontsize=8)\nax.set_xlabel('K')\nax.set_ylabel('L')\nax.set_title('Cobb-Douglas isoquant')\nax.grid(True, linestyle='--', alpha=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python_basics_files/figure-pdf/cell-54-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n函数也可以有多个返回值（返回元组）\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ndef min_max(numbers):\n    return min(numbers), max(numbers)\n\nnums = [3, 8, 1, 6]\nmin, max = min_max(nums)\n```\n:::\n\n\n**可变参数**：`*args` 接收任意数量的位置参数，类型为元组\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\ndef total(*args):\n    return sum(args)\n\nprint(total(1, 2, 3))\nprint(total(5, 10))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n15\n```\n:::\n:::\n\n\n**关键字参数**：**kwargs 接收任意数量的关键字参数，类型为字典\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\ndef show_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nshow_info(name=\"Alice\", age=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname: Alice\nage: 20\n```\n:::\n:::\n\n\n### 自定义函数的例子\n\n**BMI指数函数**\n\n同样，也可以将上面计算BMI指数的过程，定义为一个函数：\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\ndef bmi(height, weight):\n    \"\"\"计算BMI指数并返回数值和健康状况\"\"\"\n    bmi = weight / (height ** 2)\n    if bmi < 18.5:\n        status = \"偏瘦\"\n    elif bmi < 24:\n        status = \"正常\"\n    elif bmi < 28:\n        status = \"超重\"\n    else:\n        status = \"肥胖\"\n    return bmi, status\n\n# 示例调用\nbmi, status = bmi(1.75, 75)\nprint(f\"BMI = ：{bmi:.2f}，{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = ：24.49，超重\n```\n:::\n:::\n\n\n**世界银行经济体分组**\n\n自定义函数常与其他功能结合使用，例如Pandas库的`df.apply()`方法。\n\n将前面例子中的`if`语句代码，赋值粘贴至某一个AI大模型平台，输入提示：“将下面的Python代码定义为一个函数”。得到类似下面的函数：\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\ndef classify_economy(gni):\n    if gni <= 1135:\n        economy = \"低收入经济体\"\n    elif gni <= 4465:\n        economy = \"中等偏下收入经济体\"\n    elif gni <= 13845:\n        economy = \"中等偏上收入经济体\"\n    else:\n        economy = \"高收入经济体\"\n    return economy\ne = classify_economy(13500)\nprint(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n中等偏上收入经济体\n```\n:::\n:::\n\n\n然后我们将该函数应用至世界银行数据。\n\n我们需要从World Bank数据库下载2024年[GDP per capita (current US$)](https://data.worldbank.org/indicator/NY.GDP.PCAP.CD)数据，`.dropna()`函数用于删除缺失值，然后对列['NY.GDP.PACP.CD']应用自定义的`classify_economy()`函数：\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nimport pandas as pd\nimport wbgapi as wb\ngdp_pc_2024 = wb.data.DataFrame(\"NY.GDP.PCAP.CD\", time = 2024)\ngdp_pc_2024 = gdp_pc_2024.dropna()\ngdp_pc_2024['NY.GDP.PCAP.CD'].apply(classify_economy)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\neconomy\nAFE    中等偏下收入经济体\nAFW    中等偏下收入经济体\nAGO    中等偏下收入经济体\nALB    中等偏上收入经济体\nAND       高收入经济体\n         ...    \nXKX    中等偏上收入经济体\nYEM       低收入经济体\nZAF    中等偏上收入经济体\nZMB    中等偏下收入经济体\nZWE    中等偏下收入经济体\nName: NY.GDP.PCAP.CD, Length: 232, dtype: object\n```\n:::\n:::\n\n\n### 模块的导入与使用\n\nPython的模块（module）是包含一组功能的代码文件，可以通过import语句导入并使用其中的函数、变量等。分为三类：\n- python自带模块，不需要安装，直接import载入就可以了，如math包；\n- 第三方模块，通常需要下载安装，然后载入，如numpy，scipy等；\n- 自定义模块，自己写的实现某些功能的py文件的集合。\n\n上面的例子中，实际上已经出现多次模块载入的应用，如Pandas、Numpy、Matplotlib等。\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nimport math\nprint(math.sqrt(16))     \nprint(math.pi)           \n#\nfrom random import randint\nprint(randint(1, 10))    \n\n#\nimport datetime as dt\nnow = dt.datetime.now()\nprint(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.0\n3.141592653589793\n6\n2025-08-13 19:01:57.670200\n```\n:::\n:::\n\n\n可以把自定义的函数等保存在`.py`格式等脚本文件中，自定义模块。例如，在文件夹pyfiles中my_module.py文件保存了一个计算BMI的函数，我们载入该函数然后进行计算：\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nfrom pyfiles.my_module import bmi_index\n# \nbmi, status = bmi_index(1.75, 75)\nprint(f\"BMI = {bmi:.2f}\")\nprint(f\"健康状况：{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = 24.49\n健康状况：超重\n```\n:::\n:::\n\n\n## 面向对象的编程\nPython 是面向对象编程的语言。面向对象编程（Object Oriented Programming，OOP）是一种程序设计思想。它把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数，相同属性和操作方法的对象被抽象为类。类（Class）就类似上面所说的模具，而对象（Object）就是使用模具生产出的零件，对象就是类的实例（Instance）。\n\n### 对象\n类（class）是面向对象编程（OOP）的核心概念，用于描述具有相同属性和方法的一类对象的模板或蓝图。\n对象（object）是类的实例，拥有类定义的属性和方法。\n\n所有的数据类型，值，变量，函数，类，实例等等一切可操作的基本单元在 Python 都使用对象（Object）表示。每个对象有三个基本属性：ID，类型和值，也即有一块内存中存储了一个对象，这块内存中一定存有这三个属性。\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\na = 1\nprint(id(a), type(a), a)\nprint(id(bmi_index), type(bmi_index), bmi_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n140709394203560 <class 'int'> 1\n2186614728768 <class 'function'> <function bmi_index at 0x000001FD1C64E840>\n```\n:::\n:::\n\n\n`0x0000024FE78C6AC0` 是这个函数在计算机内存中的地址。\n\n### 定义一个简单的类\n\n下面定义一个简单的类`Student`，它具有两个属性`name`、`age`，和一个方法`introduce()`：\n\n- `class Student`，定义了一个类，名为Student；\n- `def __init__(self, name, age)`，`__init__` 是一个特殊的方法，被称为构造方法。当创建一个类的实例（也就是一个对象）时，它会自动被调用，主要作用是初始化对象的属性；\n- `self` 是一个约定俗成的参数，它代表了正在被创建的那个对象本身。Python 通过 `self` 来知道操作的是哪个具体的对象。\n- `name` 和 `age` 是在创建对象时需要传入的参数，它们将被用来设置对象的初始属性。\n- `self.name = name` 和 `self.age = age`，将传入的 `name` 和 `age` 参数的值赋给了对象的属性，这里分别存储学生的名字和年龄；\n- `def introduce(self)`，定义`introduce`方法，它定义了 Student 对象可以执行的一个行为这里是打印一段包含学生姓名和年龄的自我介绍。\n- `stu1 = Student(name=\"Alice\", age=20)`，创建了一个具体的对象，或者说实例，并将其赋值给变量 stu1。此时调用了 `Student` 类的构造方法 `__init__`，将 `\"Alice\"` 赋给 `name`，`20` 赋给 `age`。\n- `stu1.introduce()`，调用了 `stu1` 对象的 `introduce` 方法。\n- \n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def introduce(self):\n        print(f\"Hello，My name is {self.name}，I'm {self.age} years old.\")\n \nstu1 = Student(name=\"Alice\", age=20)\nstu2 = Student(name=\"Bob\", age=22)\n \nstu1.introduce()\nstu2.introduce()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello，My name is Alice，I'm 20 years old.\nHello，My name is Bob，I'm 22 years old.\n```\n:::\n:::\n\n\n### 例：定义一个局部均衡分析模型\n\n微观经济学中，简单的局部均衡市场模型表示为:\n$$\n\\begin{cases}\nQ_{D} = a - b\\times P \\\\\nQ_{S} = c + d\\times P \\\\\nQ_{D} = Q_{S}\n\\end{cases}\n$$\n\n我们定义一个类`Market`，将参数定义为属性，将需求、供给和均衡条件定义为三个方法：\n\n- `demand`计算给定价格的需求量；\n- `supply`计算给定价格的供给量\n- `equilibrium`计算均衡价格和均衡数量;\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nclass Market:\n    def __init__(self, a, b, c, d):\n        \"\"\"        \n        Qd = a - b*P\n        Qs = c + d*P\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n\n    def demand(self, P):        \n        return self.a - self.b * P\n\n    def supply(self, P):        \n        return self.c + self.d * P\n\n    def equilibrium(self):\n        \"\"\"\n        Qd = Qs\n        \"\"\"\n        # a - b*P = c + d*P\n        # (a - c) = (b + d)*P        \n        P_eq = (self.a - self.c) / (self.b + self.d)\n        Q_eq = self.demand(P_eq)\n        return P_eq, Q_eq\n\n# \nmarket = Market(a=100, b=2, c=20, d=3)\nP_star, Q_star = market.equilibrium()\nprint(f\"Equilibrium Price = {P_star:.2f}\")\nprint(f\"Equilibrium Quantity = {Q_star:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEquilibrium Price = 16.00\nEquilibrium Quantity = 68.00\n```\n:::\n:::\n\n\n可以利用定义的`market`类中的方法绘制需求曲线和供给曲线：\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 生成价格区间\nP = np.linspace(0, 50, 200)\nQd = [market.demand(p) for p in P]\nQs = [market.supply(p) for p in P]\n\n# 绘图\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot(Qd, P, label=\"Demand Qd\", color=\"blue\")\nax.plot(Qs, P, label=\"Supply Qs\", color=\"orange\")\nax.scatter(Q_star, P_star, color=\"red\", zorder=5)\nax.annotate(f\"Equilibrium\\n(Q={Q_star:.1f}, P={P_star:.1f})\",\n             xy=(Q_star, P_star), xytext=(Q_star+10, P_star+5),\n             arrowprops=dict(arrowstyle=\"->\", color=\"red\"))\nax.set_xlabel(\"Q\")\nax.set_ylabel(\"P\")\nax.legend()\nax.grid(True, linestyle=\"--\", alpha=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python_basics_files/figure-pdf/cell-66-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "python_basics_files\\figure-pdf"
    ],
    "filters": []
  }
}