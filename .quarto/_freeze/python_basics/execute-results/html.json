{
  "hash": "1e2de99966490fed06488b676c202bec",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python 基础\n---\n\n\n\n这一部分，将简要回归Python语言的基本内容，包括变量的类型、条件语句、循环、自定义函数和类等内容。\n\n## 变量与数据类型\n\n变量是用来存储数据的“容器”，可以赋不同类型的值。Python常见数据类型有：整数(int)、浮点数(float)、字符串(str)、布尔(bool)等。\n\n### 变量赋值\n\n变量赋值把一个具体的值存储到一个变量中，方便后续使用和操作。要注意变量命名的规则：\n\n  - 变量名只能包含字母、数字和下划线，且不能以数字开头\n  - 区分大小写（如：age 和 Age 是不同变量）\n  - 不可使用Python关键字作为变量名（如：if, for, class 等）\n  - 建议使用有意义的英文单词，遵循小写加下划线的风格（如：student_name）\n\n如果命名方式不符合要求，软件将返回错误。将下面例子中表示注释的去掉，试运行语句，看提示的错误类型是什么？\n\n\n::: {#dfe4c924 .cell execution_count=1}\n``` {.python .cell-code}\n# 1student = \"Bob\"      # 不能以数字开头\n# class = \"Math\"        # 不能使用关键字\n# student-name = \"Tom\"  # 不能包含减号\n# t&2 = 30              # 特殊符号\n```\n:::\n\n\n例如，正确的变量名：\n\n::: {#ca13b1ff .cell execution_count=2}\n``` {.python .cell-code}\nname = \"Alice\"\nage = 21\nprovince = \"Jiang Su\"\n```\n:::\n\n\n### 保留关键词\n\n上面的`class`，属于软件内部保留的33个关键词之一，注意在命名时应避免与关键词冲突：\n\n::: {#827919f7 .cell execution_count=3}\n``` {.python .cell-code}\nimport keyword\nprint(keyword.kwlist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n```\n:::\n:::\n\n\n### 常见数据类型：\n\n**整数**（int）：用于表示整数类型的数据。\n\n可以通过`type()`函数查看一个对象的类型。\n\n::: {#c33b788a .cell execution_count=4}\n``` {.python .cell-code}\na = -5\nprint(type(a))  \n#\nb = 10\nc = b/a\ntype(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nfloat\n```\n:::\n:::\n\n\n**浮点数**（float）：用于表示带小数点的数值\n\n::: {#71842a03 .cell execution_count=5}\n``` {.python .cell-code}\npi = 3.14159\nradius = 1.75\narea = pi * radius **2\nprint(type(pi))    \nprint(area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'float'>\n9.621119375\n```\n:::\n:::\n\n\n**字符串**（str）：用于表示文本数据\n\n可以用双引号或者 单引号定义字符串。当字符串较长时，可以用三引号进行定义。例如：\n\n::: {#98c50da1 .cell execution_count=6}\n``` {.python .cell-code}\nsentence = \"Python's syntax is easy to learn.\"\nmultiline = \"\"\"这个句子\n被我\n分成了几行。这样\n看起来，像诗一样。\n\"\"\"\n```\n:::\n\n\n字符串有许多属性和方法，如 @tbl-string-methods 所示：\n\n| 方法 | 功能说明 | 示例 |\n|------|-----------|------|\n| `s.lower()` | 转换为小写 | `\"Hello\".lower()` → `\"hello\"` |\n| `s.upper()` | 转换为大写 | `\"hello\".upper()` → `\"HELLO\"` |\n| `s.capitalize()` | 首字母大写，其余小写 | `\"hello world\".capitalize()` → `\"Hello world\"` |\n| `s.title()` | 每个单词首字母大写 | `\"hello world\".title()` → `\"Hello World\"` |\n| `s.strip()` | 去除字符串首尾空白字符 | `\"  hello  \".strip()` → `\"hello\"` |\n| `s.lstrip()` | 去除左侧空白 | `\"  hello\".lstrip()` → `\"hello\"` |\n| `s.rstrip()` | 去除右侧空白 | `\"hello  \".rstrip()` → `\"hello\"` |\n| `s.replace(old, new)` | 替换子串 | `\"banana\".replace(\"a\", \"o\")` → `\"bonono\"` |\n| `s.find(sub)` | 查找子串位置，找不到返回 `-1` | `\"hello\".find(\"l\")` → `2` |\n| `s.count(sub)` | 统计子串出现次数 | `\"banana\".count(\"a\")` → `3` |\n| `s.startswith(prefix)` | 是否以指定前缀开头 | `\"hello\".startswith(\"he\")` → `True` |\n| `s.endswith(suffix)` | 是否以指定后缀结尾 | `\"hello\".endswith(\"lo\")` → `True` |\n| `s.split(sep)` | 按分隔符拆分字符串 | `\"a,b,c\".split(\",\")` → `[\"a\", \"b\", \"c\"]` |\n| `sep.join(iterable)` | 使用分隔符连接字符串序列 | `\",\".join([\"a\", \"b\", \"c\"])` → `\"a,b,c\"` |\n\n: 常见的字符串方法 {#tbl-string-methods}\n\n注意，当对字符串使用某一方法时，虽然结果显示了变化，并没有改变原本对字符串。如果要保存结果可以赋值。\n\n::: {#94fb46d8 .cell execution_count=7}\n``` {.python .cell-code}\n# 例：将日期字符串按“-”分割成年、月、日\ndate_str = \"2024-06-01\"\nparts = date_str.split(\"-\")\nyear, month, day = parts\nprint(f\"年份：{year}，月份：{month}，日期：{day}\")\n\n# 例：用join方法将列表中的单词拼接成一句话\nwords = [\"Python\", \"is\", \"fun\"]\nsentence = \"$#$_\".join(words)\nprint(sentence) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n年份：2024，月份：06，日期：01\nPython$#$_is$#$_fun\n```\n:::\n:::\n\n\n**布林类型**（bool）：只有True和False两个值，常用于条件判断\n\n::: {#23fde895 .cell execution_count=8}\n``` {.python .cell-code}\nname = \"Jane\"\nage = 20\nscore = 57\nis_adult = age >= 18\nhas_passed = score >= 60\n\nprint(type(is_adult))  # <class 'bool'>\nprint(f\"是否成年：{is_adult}\")\nprint(f\"是否及格：{has_passed}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bool'>\n是否成年：True\n是否及格：False\n```\n:::\n:::\n\n\n## `print`与f-string\n\n\n### 带引号的字符\n\n上面的例子中，常用`print()`函数将内容输出到屏幕，它是Python中最常用的输出语句，它可以输出字符串、变量、表达式等，并支持格式化输出。\n\n在Python语言中，字符可以使用单引号或者双引号表示，在输出带引号的字符串时，可以利用该特点。例如\n\n::: {#459edb92 .cell execution_count=9}\n``` {.python .cell-code}\n# 输出带有引号的字符串\nprint('She said, \"Hello!\"')      # 外单内双\nprint(\"It's a nice day.\")        # 外双内单\n\n# 如果字符串本身包含同样的引号，可以用转义符\\避免冲突\nprint('It\\'s a nice day.')       # 单引号中包含单引号\nprint(\"She said, \\\"Hello!\\\"\")    # 双引号中包含双引号\n\n# 三引号可以包含单双引号和多行内容\nprint(\"\"\"他说：\"It's OK!\" \"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShe said, \"Hello!\"\nIt's a nice day.\nIt's a nice day.\nShe said, \"Hello!\"\n他说：\"It's OK!\" \n```\n:::\n:::\n\n\n### 格式化输出 f-string\nf-string（格式化字符串字面量）是 Python 3.6 及以上版本提供的一种字符串格式化方式，它让我们可以在字符串中直接嵌入变量或表达式。\n\n输出结果时也可以进行数学运算：\n\n::: {#a8d61825 .cell execution_count=10}\n``` {.python .cell-code}\nyear = 2024\nGDP_per_capita = 95749\ngrowth = 0.051\n\nmy_string = f\"{year}年，人均国内生产总值为{GDP_per_capita/10000:.3f}万元，比去年增长{growth:.3%}\"\nprint(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024年，人均国内生产总值为9.575万元，比去年增长5.100%\n```\n:::\n:::\n\n\n## 运算符与表达式\n\n运算符用于对数据进行各种操作，主要包括以下几类：\n\n- 算术运算符：`+`（加），`-`（减），`*`（乘），`/`（除），`//`（整除），`%`（取余），`**`（幂）\n- 比较运算符：`==`（等于），`!=`（不等于），`>`（大于），`<`（小于），`>=`（大于等于），`<=`（小于等于）\n- 逻辑运算符：`and`（与），`or`（或），`not`（非）\n- 赋值运算符：`=`（赋值），`+=`，`-=`，`*=`，`/=` 等\n- 成员运算符：`in`，`not in`（判断元素是否属于序列）\n- 身份运算符：`is`，`is not`（判断两个对象是否为同一对象）\n\n下面分别介绍常用的运算符及其用法。\n\n### 算术运算符\n\n算术运算符包括：加法（+）、减法（-）、乘法（*）、除法（/）、整除（//）、取余（%）、幂运算（**）：\n\n::: {#f9b90c2c .cell execution_count=11}\n``` {.python .cell-code}\na = 15\nb = 4\n\nprint(\"a // b =\", a // b)  \nprint(\"a % b =\", a % b)    \nprint(\"a ** b =\", a ** b)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\na // b = 3\na % b = 3\na ** b = 50625\n```\n:::\n:::\n\n\n### 比较运算符\n\n比较运算符用于比较两个值，结果为布尔类型（True或False）\n\n::: {#4e43dfee .cell execution_count=12}\n``` {.python .cell-code}\nprint(\"a > b:\", a > b)\nprint(\"a == b:\", a == b)   \nprint(\"a != b:\", a != b)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\na > b: True\na == b: False\na != b: True\n```\n:::\n:::\n\n\n#### 逻辑运算符\n\n逻辑运算符用于连接多个条件表达式，常用于复合条件判断。例如：\n\n::: {#40c39a53 .cell execution_count=13}\n``` {.python .cell-code}\nx = 8\ny = 3\n#\nprint((x > 5) and (y < 5))  \nprint((x < 5) or (y < 5))   \nprint(not (x > y))          \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nFalse\n```\n:::\n:::\n\n\n### 赋值运算符\n\n赋值运算符用于给变量赋值或在原有基础上进行运算后赋值:\n\n::: {#a4ad187f .cell execution_count=14}\n``` {.python .cell-code}\nx = 10      \nx += 5   \nx -= 3   \nx *= 2   \nx /= 4   \nx //= 2  \nx %= 2   \nx **= 3  \n#\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n```\n:::\n:::\n\n\n### 成员运算符\n\n成员运算符用于判断某个元素是否属于某个序列，如列表、元组、字符串等。例如：\n\n::: {#13717ec8 .cell execution_count=15}\n``` {.python .cell-code}\nfor i in range(5):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n## 控制结构：条件与循环\n\n### 条件语句\n\n条件语句（if语句）用于根据条件判断执行不同的代码块，基本结构：\n\n::: {#f3a36171 .cell execution_count=16}\n``` {.python .cell-code}\n# if 条件:\n#     代码块1\n# elif 其他条件:\n#     代码块2\n# else:\n#     代码块3\n```\n:::\n\n\n以世界银行经济体收入分组标准为例：\n\n[世界银行](https://blogs.worldbank.org/zh/opendata/world-bank-country-classifications-by-income-level-for-2024-2025)按照人均国民收入把世界各经济体分成四组，如 @tbl-worldbankincome 所示，中、低收入国家被称为发展中国家，高收入国家被称为发达国家。\n\n| 经济体分组           | 划分标准（人均国民总收入）     |\n|----------------------|-------------------------------|\n| 低收入经济体         | 1145 美元以下                 |\n| 中等偏下收入经济体   | 1146—4515 美元               |\n| 中等偏上收入经济体   | 4516—14005 美元              |\n| 高收入经济体         | 14005 美元以上               |\n\n: 世界银行经济体收入分组标准 {#tbl-worldbankincome}\n\n可以使用嵌套条件语句来进行判别：\n\n::: {#0dd5e3dd .cell execution_count=17}\n``` {.python .cell-code}\ngni = 13660\n\nif gni <= 1135:\n    economy = \"低收入经济体\"\nelif gni <= 4465:\n    economy =  \"中等偏下收入经济体\"\nelif gni <= 13845:\n    economy = \"中等偏上收入经济体\"\nelse:\n    economy = \"高收入经济体\"\n\nprint(f\"人均国民总收入为 {gni} 美元，属于：{economy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n人均国民总收入为 13660 美元，属于：中等偏上收入经济体\n```\n:::\n:::\n\n\n### 例： BMI指数\n再来看一个计算BMI（Body Mass Index）指数的例子：\n$$\nBMI = \\frac{weight(kg)}{height(m)^{2}}\n$$\n\n::: {#3dd6a1c9 .cell execution_count=18}\n``` {.python .cell-code}\nheight = 1.75 \nweight = 75 \n\n# 计算BMI\nbmi = weight / (height ** 2)\n\nif bmi < 18.5:\n    status = \"偏瘦\"\nelif bmi < 24:\n    status = \"正常\"\nelif bmi < 28:\n    status = \"超重\"\nelse:\n    status = \"肥胖\"\nprint(f\"BMI = {bmi:.2f}，{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = 24.49，超重\n```\n:::\n:::\n\n\n### for循环与range\n\n`for`循环用于遍历序列（如列表、字符串、元组等）或按照一定范围循环，经常与`range()`一起使用。\n\n::: {#b372025b .cell execution_count=19}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n# \ntotal = 0\nfor i in range(1, 101):\n    total += i\nprint(\"1到100的和为：\", total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n1到100的和为： 5050\n```\n:::\n:::\n\n\n### while循环\nwhile循环是一种基于条件判断的循环结构。当条件为True时，循环体会反复执行，直到条件变为False为止。\n\nwhile循环要注意循环变量的更新，否则可能会造成死循环。\n\n::: {#fcb2b700 .cell execution_count=20}\n``` {.python .cell-code}\n# 例1：输出1到5\ni = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n\n# 例2：计算1到100的和\ntotal = 0\nn = 1\nwhile n <= 100:\n    total += n\n    n += 1\nprint(\"1到100的和为：\", total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n1到100的和为： 5050\n```\n:::\n:::\n\n\n## 容器类型：列表、字典、元组、集合\n\n列表（list）、字典（dict）、元组（tuple）、集合（set）是Python中常用的容器类型。\n\n- 列表：用[]定义，有序可变\n- 字典：用{}定义，键值对结构\n- 元组：用()定义，有序不可变\n- 集合：用set()或{}定义，无序不重复\n\n### 列表\n\n@tbl-list-methods 中列出了常用的列表方法，假设初始列表为`lst = [1, 2, 3]`：\n\n| 方法 | 功能说明 | 示例 | 结果 |\n|------|----------|------|------|\n| `append(x)` | 在列表末尾添加元素 `x` | `lst.append(4)` | `[1, 2, 3, 4]` |\n| `extend(iterable)` | 将可迭代对象中的元素添加到列表末尾 | `lst.extend([4, 5])` | `[1, 2, 3, 4, 5]` |\n| `insert(i, x)` | 在索引 `i` 处插入元素 `x` | `lst.insert(1, 10)` | `[1, 10, 2, 3]` |\n| `remove(x)` | 删除列表中第一个值为 `x` 的元素 | `lst.remove(2)` | `[1, 3]` |\n| `pop([i])` | 移除并返回指定索引的元素，默认删除最后一个 | `lst.pop()` / `lst.pop(0)` | `3` / `1` |\n| `clear()` | 清空列表所有元素 | `lst.clear()` | `[]` |\n| `index(x)` | 返回第一个值为 `x` 的索引 | `lst.index(3)` | `2` |\n| `count(x)` | 返回元素 `x` 在列表中出现的次数 | `lst.count(2)` | `1` |\n| `sort()` | 原地排序（默认升序） | `lst.sort()` | `[1, 2, 3]` |\n| `sort(reverse=True)` | 原地降序排序 | `lst.sort(reverse=True)` | `[3, 2, 1]` |\n| `reverse()` | 原地反转列表顺序 | `lst.reverse()` | `[3, 2, 1]` |\n| `copy()` | 返回列表的浅拷贝 | `new_lst = lst.copy()` | `[1, 2, 3]` |\n: 列表的常用方法 {#tbl-list-methods}\n\n::: {#68bdf1ff .cell execution_count=21}\n``` {.python .cell-code}\n# 列表（list）：有序、可变的元素集合，用[]表示\nnumbers = [10, 20, 30, 40]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# 访问元素（索引从0开始）\nprint(numbers[0])      # 10\nprint(fruits[-1])      # cherry（倒数第1个）\n\n# 修改元素\nnumbers[1] = 25\nprint(numbers)         # [10, 25, 30, 40]\n\n# 添加元素\nfruits.append(\"orange\")        # 末尾添加\nfruits.insert(1, \"pear\")       # 指定位置插入\nprint(fruits)                  # ['apple', 'pear', 'banana', 'cherry', 'orange']\n\n# 删除元素\ndel numbers[2]                 # 按索引删除\nfruits.remove(\"banana\")        # 按值删除\nprint(numbers)                 # [10, 25, 40]\nprint(fruits)                  # ['apple', 'pear', 'cherry', 'orange']\n\n# 列表切片\nprint(numbers[1:])             # [25, 40]\nprint(fruits[:2])              # ['apple', 'pear']\n\n# 遍历列表\nfor fruit in fruits:\n    print(fruit)\n\n# 列表常用方法\nprint(len(numbers))            # 长度\nprint(max(numbers))            # 最大值\nprint(min(numbers))            # 最小值\nprint(numbers.count(25))       # 出现次数\nnumbers.sort()                 # 排序\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\ncherry\n[10, 25, 30, 40]\n['apple', 'pear', 'banana', 'cherry', 'orange']\n[10, 25, 40]\n['apple', 'pear', 'cherry', 'orange']\n[25, 40]\n['apple', 'pear']\napple\npear\ncherry\norange\n3\n40\n10\n1\n[10, 25, 40]\n```\n:::\n:::\n\n\n::: {#3dda7635 .cell execution_count=22}\n``` {.python .cell-code}\n# 元组（tuple）：有序、不可变的元素集合，用()表示\npoint = (3, 4)\ncolors = (\"red\", \"green\", \"blue\")\n\n# 访问元素\nprint(point[0])                # 3\nprint(colors[-1])              # blue\n\n# 元组不可修改\n# point[1] = 5  # 会报错\n\n# 单元素元组要加逗号\nsingle = (5,)\nprint(type(single))            # <class 'tuple'>\n\n# 元组可以用于多变量赋值\nx, y = point\nprint(x, y)                    # 3 4\n\n# 遍历元组\nfor color in colors:\n    print(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\nblue\n<class 'tuple'>\n3 4\nred\ngreen\nblue\n```\n:::\n:::\n\n\n### 例：计算净现值\n\n如果某项资产在多个时间周期内支付一系列收益流，那么我们可以使用**贴现率**来计算这整个收益序列对消费者的当前价值。\n\n更一般地说，我们用索引$t$来表示每一个离散的时间周期（例如年、月、日），其中“今天”为第 $t = 0$ 期，资产一共存在 $T$ 个时间周期。\n\n我们用 $y_t$ 表示第 $t$ 期的收益，**并假设这些收益现在是已知的**。\n\n如果贴现因子为 $r\\ge 0$，那么消费者对第 $t$ 期收到的收益 $y_t$ 的当前“价值”是：\n\n$$\n\\frac{1}{(1 + r)^{t}}y_t\n$$\n\n需要注意的是，当 $t = 0$ 时，当前价值就是 $y_0$。\n\n基于这一逻辑，我们可以用一个求和表达式来表示整条收益序列的总价值：\n\n$$\nP_{0} = \\sum_{t=0}^{T} (\\frac{1}{1+r})^{t}y_{t}\n$$\n\n我们将假设的收益序列保存为列表： `y = [-100, 80, 60, 50]`，贴现率假设为0.05：\n\n::: {#bd12274f .cell execution_count=23}\n``` {.python .cell-code}\ny = [-100, 80, 60, 50]\nr = 0.05\nP0 = 0\nfor t in range(len(y)):\n    P0 = P0 + y[t] / (1 + r) ** t\nprint(f\"The Total Present Value = ：{P0:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Total Present Value = ：73.80\n```\n:::\n:::\n\n\n### 字典的键值对操作\n字典（dict）是一种用于存储键值对的数据结构。每个元素由“键”（key）和“值”（value）组成，键必须唯一且不可变，值可以是任意类型。\n字典用大括号{}表示，键和值之间用冒号:分隔，多个键值对之间用逗号,分隔。\n\n::: {#961b9612 .cell execution_count=24}\n``` {.python .cell-code}\n# 定义字典\nperson = {\"name\": \"Tom\", \"age\": 18, \"gender\": \"male\"}\nprint(person)\n\n# 访问字典的值（通过键）\nprint(person[\"name\"])      # 输出：Tom\n\n# 添加或修改元素\nperson[\"city\"] = \"Beijing\" # 添加新键值对\nperson[\"age\"] = 20         # 修改已有键的值\nprint(person)\n\n# 遍历字典\nfor key in person:\n    print(key, person[key])\n\n# 常用方法\nprint(person.keys())       # 所有键\nprint(person.values())     # 所有值\nprint(person.items())      # 所有键值对\nprint(\"name\" in person)    # 判断键是否存在\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Tom', 'age': 18, 'gender': 'male'}\nTom\n{'name': 'Tom', 'age': 20, 'gender': 'male', 'city': 'Beijing'}\nname Tom\nage 20\ngender male\ncity Beijing\ndict_keys(['name', 'age', 'gender', 'city'])\ndict_values(['Tom', 20, 'male', 'Beijing'])\ndict_items([('name', 'Tom'), ('age', 20), ('gender', 'male'), ('city', 'Beijing')])\nTrue\n```\n:::\n:::\n\n\n### 应用：利用字典进行词频统计\n\n统计一段文本中每个单词出现的次数，例如统计下面英文歌词代词出现的次数。首先将字母转化为小写字母，然后利用字符的切分方法`.split()`，将结果保存在字典`freq`之中，然后按词频排序，注意使用了lambda函数的方法。\n\n::: {#fbc9e5d9 .cell execution_count=25}\n``` {.python .cell-code}\ntext = \"\"\"Generals gathered in their masses\nJust like witches at black masses\nEvil minds that plot destruction\nSorcerer of death's construction\nIn the fields, the bodies burning\nAs the war machine keeps turning\nDeath and hatred to mankind\nPoisoning their brainwashed minds\nOh, Lord, yeah\nPoliticians hide themselves away\nThey only started the war\nWhy should they go out to fight?\nThey leave that role to the poor, yeah\nTime will tell on their power minds\nMaking war just for fun\nTreating people just like pawns in chess\nWait 'til their judgement day comes, yeah\nNow in darkness, world stops turning\nAshes where their bodies burning\nNo more war pigs have the power\nHand of God has struck the hour\nDay of judgement, God is calling\nOn their knees, the war pigs crawling\nBegging mercy for their sins\nSatan laughing, spreads his wings\nOh, Lord, yeah\n\"\"\"\n\nwords = text.lower().split()\nfreq = {}\n\nfor word in words:\n    if word in freq:         # 判断单词是否已在字典中\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\nsorted_freq = sorted(freq.items(), \n                      key=lambda item: item[1], \n                      reverse=True)\n\nfor word, count in sorted_freq[:10]:\n    print(f\"{word}: {count}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe: 8\ntheir: 7\nwar: 5\nin: 4\nyeah: 4\njust: 3\nminds: 3\nof: 3\nto: 3\nthey: 3\n```\n:::\n:::\n\n\n## 函数与模块\n\n### 内置函数的调用\nPython内置函数是系统自带的、可以直接使用的函数，无需导入模块。常见内置函数有：`abs()`, `len()`,`max()`, `min()`, `sum()`, `type()`, `int()`, `float()`, `str()`, `list()`, `dict()`, `range()` 等\n\n::: {#e663614d .cell execution_count=26}\n``` {.python .cell-code}\n# 例1：abs() \nprint(abs(-10))\n\n# 例2：len() 计算长度\nlst = [1, 2, 3, 4]\nprint(len(lst))\n\n# 例3：max() 和 min() 求最大最小值\nprint(max(5, 8, 2))\nprint(min([7, 3, 9]))\n\n# 例4：sum() 求和\nprint(sum([1, 2, 3]))\n\n# 例5：type() 查看类型\nprint(type(\"hello\")) \n\n# 例6：int(), float(), str() 类型转换\nprint(int(\"123\"))    \nprint(float(\"3.14\")) \nprint(str(456))      \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n4\n8\n3\n6\n<class 'str'>\n123\n3.14\n456\n```\n:::\n:::\n\n\n### 自定义函数\n\n自定义函数使用def关键字，指定函数名、参数列表和函数体。下面是几个简单的自定义函数的例子。\n\n::: {#855df99f .cell execution_count=27}\n``` {.python .cell-code}\ndef greet(name):\n    print(f\"Hello, {name}!\")\ngreet(\"Alice\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\n```\n:::\n:::\n\n\n带返回值的函数，如计算平均数\n\n::: {#e7485e40 .cell execution_count=28}\n``` {.python .cell-code}\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\nnums = [3, 8, 1, 6]\nprint(mean(nums))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.5\n```\n:::\n:::\n\n\n带默认参数的函数\n\n::: {#1bfb9528 .cell execution_count=29}\n``` {.python .cell-code}\ndef power(base, exponent=2):\n    return base ** exponent\n\nprint(power(4))     \nprint(power(2, 3)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16\n8\n```\n:::\n:::\n\n\n函数也可以有多个返回值（返回元组）\n\n::: {#b7fbba2b .cell execution_count=30}\n``` {.python .cell-code}\ndef min_max(numbers):\n    return min(numbers), max(numbers)\n\nnums = [3, 8, 1, 6]\nmin, max = min_max(nums)\n```\n:::\n\n\n另外一个例子计算商和余数:\n\n::: {#45723515 .cell execution_count=31}\n``` {.python .cell-code}\ndef divide(a, b):\n    quotient = a // b\n    remainder = a % b\n    return quotient, remainder\n\nq, r = divide(17, 5)\n```\n:::\n\n\n**可变参数**：`*args` 接收任意数量的位置参数，类型为元组\n\n::: {#83ab05d5 .cell execution_count=32}\n``` {.python .cell-code}\ndef total(*args):\n    return sum(args)\n\nprint(total(1, 2, 3))\nprint(total(5, 10))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n15\n```\n:::\n:::\n\n\n**关键字参数**：**kwargs 接收任意数量的关键字参数，类型为字典\n\n::: {#9c5dc084 .cell execution_count=33}\n``` {.python .cell-code}\ndef show_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nshow_info(name=\"Alice\", age=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname: Alice\nage: 20\n```\n:::\n:::\n\n\n### 例：世界银行经济体分组（续）\n\n将前面例子中的`if`语句代码，赋值粘贴至某一个AI大模型平台，输入提示：“将下面的Python代码定义为一个函数”。\n\n::: {#3fb9125e .cell execution_count=34}\n``` {.python .cell-code}\ndef classify_economy(gni):\n    if gni <= 1135:\n        economy = \"低收入经济体\"\n    elif gni <= 4465:\n        economy = \"中等偏下收入经济体\"\n    elif gni <= 13845:\n        economy = \"中等偏上收入经济体\"\n    else:\n        economy = \"高收入经济体\"\n    return economy\ne = classify_economy(13500)\nprint(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n中等偏上收入经济体\n```\n:::\n:::\n\n\n自定义函数常与其他功能结合使用，例如Pandas库的`df.apply()`方法。下面的例子首先从World Bank数据库下载2024年[GDP per capita (current US$)](https://data.worldbank.org/indicator/NY.GDP.PCAP.CD)数据，删除缺失值，然后应用自定义的`classify_economy()`函数：\n\n::: {#c003a315 .cell execution_count=35}\n``` {.python .cell-code}\nimport pandas as pd\nimport wbgapi as wb\ngdp_pc_2024 = wb.data.DataFrame(\"NY.GDP.PCAP.CD\", time = 2024)\ngdp_pc_2024 = gdp_pc_2024.dropna()\ngdp_pc_2024['NY.GDP.PCAP.CD'].apply(classify_economy)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\neconomy\nAFE    中等偏下收入经济体\nAFW    中等偏下收入经济体\nAGO    中等偏下收入经济体\nALB    中等偏上收入经济体\nAND       高收入经济体\n         ...    \nXKX    中等偏上收入经济体\nYEM       低收入经济体\nZAF    中等偏上收入经济体\nZMB    中等偏下收入经济体\nZWE    中等偏下收入经济体\nName: NY.GDP.PCAP.CD, Length: 232, dtype: object\n```\n:::\n:::\n\n\n### 例：BMI指数函数\n\n同样，也可以将上面计算BMI指数的过程，定义为一个函数：\n\n::: {#0e843261 .cell execution_count=36}\n``` {.python .cell-code}\ndef bmi(height, weight):\n    \"\"\"计算BMI指数并返回数值和健康状况\"\"\"\n    bmi = weight / (height ** 2)\n    if bmi < 18.5:\n        status = \"偏瘦\"\n    elif bmi < 24:\n        status = \"正常\"\n    elif bmi < 28:\n        status = \"超重\"\n    else:\n        status = \"肥胖\"\n    return bmi, status\n\n# 示例调用\nbmi, status = bmi(1.75, 75)\nprint(f\"BMI = ：{bmi:.2f}，{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = ：24.49，超重\n```\n:::\n:::\n\n\n### 例：定义一个集中度函数\n\n令 $s_i$表示企业 $i$ 的市场份额，定义一个函数，计算：\n\n产业集中度指数（ $CR_{n}$ ）\n$$\nCR_{4} = \\sum_{i=1}^{4}s_{i}\n$$\n\n和赫芬达尔指数\n$$\nH_{i} = \\sum_{i=1}^{n}s_{i}^{2}\n$$\n\n::: {#1491bf54 .cell execution_count=37}\n``` {.python .cell-code}\ndef concentration_index(sales, top_n=4):\n    \"\"\"\n    计算前N家企业的集中度（Cn）和赫芬达尔-赫希曼指数（HHI）。\n    sales: 销售收入列表\n    top_n: 前N家，默认为4（C4），可设为8（C8）\n    返回：(Cn, HHI)\n    \"\"\"\n    total = sum(sales)\n    if total == 0:\n        return 0, 0\n    sorted_sales = sorted(sales, reverse=True)\n    cn = sum(sorted_sales[:top_n]) / total\n    hhi = sum((s / total) ** 2 for s in sales)\n    return cn, hhi\n\n# 示例\nsales = [100, 80,85, 60, 40, 30, 20, 10, 5, 3, 2]\nconcentration_index(sales, top_n=4)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n(0.7471264367816092, 0.15993129871845688)\n```\n:::\n:::\n\n\n### 例：定义Cobb-Douglas函数\n\nCobb-Douglas生产函数是最常见的设定，例如一个规模报酬不变的CD函数表示为：\n$$\nY = AK^{\\alpha}L^{1-\\alpha}\n$$\n\n其中，$\\alpha$ 表示资本的产出弹性，$A$ 表示全要素生产率。\n\n::: {#c3593f08 .cell execution_count=38}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef cobb_douglas(K, L, alpha = 1/3, A = 1):\n    output = A * K**alpha * L**(1 - alpha)\n    return output\ncobb_douglas(K=1, L=0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n0.6299605249474366\n```\n:::\n:::\n\n\n从微观经济学内容我们知道，等产量曲线是带来相同产出的要素组合 $(K, L)$ 形成的曲线，可以应用matplotlib中的`contour`函数绘制上面函数定义的等产量曲线：\n\n::: {#dd866b4c .cell execution_count=39}\n``` {.python .cell-code}\n# 生成K和L的网格\nK = np.linspace(0.1, 2, 100)\nL = np.linspace(0.1, 2, 100)\nK_grid, L_grid = np.meshgrid(K, L)\n\n# 利用函数计算产量\nY = cobb_douglas(K_grid, L_grid)\n# 绘图\nfig, ax = plt.subplots(figsize=(8, 6))\ncontours = ax.contour(K_grid, L_grid, Y, levels=8, cmap='viridis')\nax.clabel(contours, inline=True, fontsize=8)\nax.set_xlabel('K')\nax.set_ylabel('L')\nax.set_title('Cobb-Douglas isoquant')\nax.grid(True, linestyle='--', alpha=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python_basics_files/figure-html/cell-40-output-1.png){}\n:::\n:::\n\n\n### 模块的导入与使用\n\nPython的模块（module）是包含一组功能的代码文件，可以通过import语句导入并使用其中的函数、变量等。分为三类：\n- python自带模块，不需要安装，直接import载入就可以了，如math包；\n- 第三方模块，通常需要下载安装，然后载入，如numpy，scipy等；\n- 自定义模块，自己写的实现某些功能的py文件的集合。\n\n::: {#c803c407 .cell execution_count=40}\n``` {.python .cell-code}\nimport math\nprint(math.sqrt(16))     \nprint(math.pi)           \n#\nfrom random import randint\nprint(randint(1, 10))    \n\n#\nimport datetime as dt\nnow = dt.datetime.now()\nprint(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.0\n3.141592653589793\n8\n2025-07-27 23:51:19.361235\n```\n:::\n:::\n\n\n可以把自定义的函数等保存在`.py`格式等脚本文件中，自定义模块。例如，在文件夹pyfiles中my_module.py文件保存了一个计算BMI的函数，我们载入该函数然后进行计算：\n\n::: {#0ab42972 .cell execution_count=41}\n``` {.python .cell-code}\nfrom pyfiles.my_module import bmi_index\n\n# 示例调用\nbmi, status = bmi_index(1.75, 75)\nprint(f\"BMI = {bmi:.2f}\")\nprint(f\"健康状况：{status}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBMI = 24.49\n健康状况：超重\n```\n:::\n:::\n\n\n## 面向对象的编程\n\n### 什么是类\n类（class）是面向对象编程（OOP）的核心概念，用于描述具有相同属性和方法的一类对象的模板或蓝图。\n对象（object）是类的实例，拥有类定义的属性和方法。\n\n### 定义一个简单的类\n\n下面定义一个类`Student`，它具有两个属性`name`、`age`，和一个方法`introduce()`：\n\n::: {#554d8168 .cell execution_count=42}\n``` {.python .cell-code}\nclass Student:\n    # 构造方法，初始化属性\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # 方法\n    def introduce(self):\n        print(f\"Hello，My name is {self.name}，I'm {self.age} years old.\")\n\n# \nstu1 = Student(\"Alice\", 20)\nstu2 = Student(\"Bob\", 22)\n\n# \nstu1.introduce()\nstu2.introduce()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello，My name is Alice，I'm 20 years old.\nHello，My name is Bob，I'm 22 years old.\n```\n:::\n:::\n\n\n### 例：定义一个局部均衡分析模型\n\n微观经济学中，简单的局部均衡市场模型表示为:\n$$\n\\begin{cases}\nQ_{D} = a - b\\times P \\\\\nQ_{S} = c + d\\times P \\\\\nQ_{D} = Q_{S}\n\\end{cases}\n$$\n\n我们定义一个类`Market`，将参数定义为属性，将需求、供给和均衡条件定义为三个方法：\n\n- `demand`计算给定价格的需求量；\n- `supply`计算给定价格的供给量\n- `equilibrium`计算均衡价格和均衡数量;\n\n::: {#472a55f1 .cell execution_count=43}\n``` {.python .cell-code}\nclass Market:\n    def __init__(self, a, b, c, d):\n        \"\"\"        \n        Qd = a - b*P\n        Qs = c + d*P\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n\n    def demand(self, P):        \n        return self.a - self.b * P\n\n    def supply(self, P):        \n        return self.c + self.d * P\n\n    def equilibrium(self):\n        \"\"\"\n        Qd = Qs\n        \"\"\"\n        # a - b*P = c + d*P\n        # (a - c) = (b + d)*P        \n        P_eq = (self.a - self.c) / (self.b + self.d)\n        Q_eq = self.demand(P_eq)\n        return P_eq, Q_eq\n\n# \nmarket = Market(a=100, b=2, c=20, d=3)\nP_star, Q_star = market.equilibrium()\nprint(f\"Equilibrium Price = {P_star:.2f}\")\nprint(f\"Equilibrium Quantity = {Q_star:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEquilibrium Price = 16.00\nEquilibrium Quantity = 68.00\n```\n:::\n:::\n\n\n可以利用定义的`market`类中的方法绘制需求曲线和供给曲线：\n\n::: {#311546cd .cell execution_count=44}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 生成价格区间\nP = np.linspace(0, 50, 200)\nQd = [market.demand(p) for p in P]\nQs = [market.supply(p) for p in P]\n\n# 绘图\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot(Qd, P, label=\"Demand Qd\", color=\"blue\")\nax.plot(Qs, P, label=\"Supply Qs\", color=\"orange\")\nax.scatter(Q_star, P_star, color=\"red\", zorder=5)\nax.annotate(f\"Equilibrium\\n(Q={Q_star:.1f}, P={P_star:.1f})\",\n             xy=(Q_star, P_star), xytext=(Q_star+10, P_star+5),\n             arrowprops=dict(arrowstyle=\"->\", color=\"red\"))\nax.set_xlabel(\"Q\")\nax.set_ylabel(\"P\")\nax.legend()\nax.grid(True, linestyle=\"--\", alpha=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python_basics_files/figure-html/cell-45-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "python_basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}