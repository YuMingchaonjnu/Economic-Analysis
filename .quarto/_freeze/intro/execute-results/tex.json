{
  "hash": "6bd0a41660ff7440afa10aeec7fbf23b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 引言\n---\n\n\n\n《基于Python的经济分析与应用》旨在将经济学理论与现代数据分析技术相结合，内容涵盖Python编程基础、数据采集与处理、经济数据分析、可视化展示及实际案例应用。\n\n通过学习，使学生掌握应用Python进行经济数据分析的方法，提高数据处理与决策支持能力，为未来从事数据驱动的经济分析、科学研究或制定经济决策打下坚实基础。\n\n## 内容是关于什么的？\n\n### 经济数据分析\n\n对经济数据进行分析长期以来都是政策制定、投资者、企业和消费者关注的焦点：\n\n- 宏观经济形式分析。如毕马威的[中国经济观察](https://kpmg.com/cn/zh/home/insights/2018/02/china-economic-monitor.html)季度报告等、[中国宏观经济论坛](http://ier.ruc.edu.cn/)发布的[CMF中国宏观经济专题报告](http://ier.ruc.edu.cn/zybg/2a2b6422eeff408bb9df2d0266255c1d.htm)等。\n- 美国经济分析局（Bureau of Economic Analysis，BEA）：负责公布美国宏观经济以及行业的统计数据，以及有关美国国内生产总值（GDP）和各个市/镇/乡/村/县和大都市区的数据；\n- [数据科学](https://aws.amazon.com/cn/what-is/data-science/)在人工智能时代的广泛应用；\n- 数据服务商的重要作用。如[彭博社](https://www.bloombergchina.com/solution/data-content/)、[Wind资讯](https://www.wind.com.cn/portal/zh/Home/index.html)等。\n\n### 数据分析方法\n\n将数据分析方法应用至经济学、金融学和国际贸易等学科的有关主题。主要包括：\n\n- 经济数据分析：如增长、不平等等、通货膨胀等宏观数据；\n- 统计分析方法：t检验、方差分析等；\n- 线性回归方法\n- 蒙特卡洛模拟分析\n- 机器学习基础方法\n- 投入产出模型；\n- 网络分析方法；\n\n### 主要参考书\n\n会用到部分Python有关的内容，如：\n\n- @mckinney2022python， [在线阅读](https://wesmckinney.com/book/)\n- @vanderplas2016python， [在线阅读](https://jakevdp.github.io/PythonDataScienceHandbook/)\n- [Python Programming for Economics and Finance](https://python-programming.quantecon.org/intro.html)\n\n## 分析工具：Python\n\n我们使用Python作为主要的分析工具。根据[TIOBE Index for August 2025](https://www.tiobe.com/tiobe-index/)，Python是目前最流行的编程语言。\n\n![TIOBE Programming Community Index](images/languages_ranking.png){#fig-python_rank}\n\n### 功能强大，应用广泛\n\nPython广泛应用于机器学习、科学计算等各个领域：\n\n1. 机器学习\n2. 数据科学\n3. 通讯\n4. 网页开发\n5. CGI and GUI\n6. 自然语言处理\n7. 游戏开发\n10. 等等\n\n### Python的特点\n\nPython具有许多优点：\n\n1. 易读、易写和易调试；\n2. 核心内容易学；\n3. 众多库的支持；\n4. 初学者友好\n5. 支持多平台\n6. 网络资源众多\n\n## 安装和设置软件环境\n\n### 下载安装Python\n\n- 自[官方网站](https://www.python.org/downloads/)下载Python，当前版本3.13.x。\n\n- 双击打开下载的安装程序，如果是Windows操作系统，在点击“Install Now”安装程序之前，**注意**勾选：Add Python to PATH，将Python的安装路径添加到操作系统的环境变量Path中，如图 @fig-add_to_path 所示：\n\n![将Python添加至环境](images/ADD_TO_PATH.PNG){#fig-add_to_path}\n\n- 在“命令提示符”输入`python --version`查看安装版本，如图 @fig-python_version 所示。\n\n![Python 版本](images/python_version.PNG){#fig-python_version}\n\n### 安装Jupyer Lab\n\n- 安装[JupyterLab](https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html)。通过命令提示符（或Mac OS的终端）安装：`pip install jupyterlab`。应用过程中经常需要使用pip安装程序，建议将镜像源配置为[清华大学开源软件镜像站](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)。\n- 在命令提示符输入:`jupyter lab`，就可以在浏览器启动Jupyter Lab，新建一个Notebook就可以使用了，如 @fig-jupyter_lab 所示 。选中单元格（cell），设置为“code”格式（其他两种是markdown和raw），输入：\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n![Jupyter Lab](images/jupyter_lab.PNG){#fig-jupyter_lab}\n\n### 安装Visual Studio Code\n\nVisual Studio Code是由微软推出的免费、开源、跨平台的代码编辑器，支持几十种主流编程语言（如JavaScript、Python、C++、Java、Go 等），并且与微软推出的Copilot人工智能工具高度融合，拥有强大的功能和灵活的扩展性。\n\n- 下载安装[Visual Studio Code ](https://code.visualstudio.com/)。\n要将软件设置为中文，可以使用快捷键`Ctrl + Shift + P`打开命令面板，输入`Configure Display Languate`，在出现的列表中，选择“中文（简体）”，根据提示重启VS Code，界面语言就会变为中文。\n\n- 在扩展（Extensions Marketplace）搜索安装插件：\n  - Python\n  - Jupyter,\n  - Excel Viewer\n  - Rainbow CSV\n  \n应用时，Visual Studio Code 可以“打开文件”或者 “打开文件夹”将项目所在文件夹处打开。建议以打开文件夹方式，可以比较清楚的概览代码、数据、图形等子文件夹。\n  \n### 设置虚拟环境和安装第三方程序包\n\n要安装第三方程序包，基本的方式是通过`pip`命令：\n\n`python -m pip install SomePackage`\n\n例如，在命令提示符，或者在Visual Studio Code使用快捷键`Ctrl + Shift + \\` `新建终端，输入命令使用pip安装。：\n\n- Numpy: `python -m pip install numpy`\n- Pandas: `python -m pip install pandas`\n- Matplotlib: `python -m pip install matplotlib`\n\n更快捷的方式是通过下载记录有程序包名字的requirements.txt文件进行安装：\n\n`pip install -r requirements.txt`\n\n可以将需要的第三方程序一次安装。\n\n## 脚本模式和交互模式\n\nPython可以交互式或脚本模式运行。\n\n### 交互式\n\n用户输入代码，回车运行。在如IDLE，Ipython都可以方便地进行交互式操作。例如：\n\n  - 在命令提示符（或VSC终端）输入`ipython`，将打开Ipython的界面，输入`3 + 3`，回车，将在屏幕上立刻显示计算结果；\n  - 在应用程序中打开 IDLE Shell，也可以方便的进行交互式操作；\n  - 在Jupyter Notebook的代码单元格内，输入代码，点击运行显示结果；\n  \n### 脚本模式\n\n脚本模式是将代码保存在.py格式的文件中，然后使用命令提示符调用脚本。\n\n例如，在文件夹pyfiles中保存有一个文件`lunch.py`，定义了一个随机选择午餐的函数`lunch()`，当运行该函数时，随机从列表中选择一个作为推荐的午餐。\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport random\n\ndef lunch():\n    \"\"\"Randomly choose a lunch option and return the result.\"\"\"\n    lunch_list = [\"Rice Bowl\", \"Ramen\", \"Salad\",\n                 \"Burger\", \"Dumplings\", \"Pizza\"]\n    return random.choice(lunch_list)\n\nif __name__ == \"__main__\":\n    result = lunch()\n    print(\"Recomm:\",result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecomm: Burger\n```\n:::\n:::\n\n\n在命令提示符或终端中运行：\n\n`python pyfiles/lunch.py`\n\n当然，也可以先改变当前文件夹至pyfiles文件夹，就可以省略路径。\n\n### 在Visual Studio Code 中 应用 Jupyter notebook\n\n打开VSC，点击“文件- 新建文件”，从弹出的菜单选择“Jupyter Notebook”。\n\n![新建Jupyter Notebook](images/new_notebook.png){#fig-new_notebook}\n\n下面的例子来自[Matplotlib官方网站](https://matplotlib.org/stable/gallery/statistics/histogram_cumulative.html#sphx-glr-gallery-statistics-histogram-cumulative-py)，将代码复制到Notebook的一个单元格中，点击左侧的运行三角箭头（VSC也许会让你选择一个核），绘制 @fig-cum_hist 所示的一个累计概率分布图：\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nmu = 200\nsigma = 25\nn_bins = 25\ndata = np.random.normal(mu, sigma, size=100)\n\nfig = plt.figure(figsize=(9, 4), layout=\"constrained\")\naxs = fig.subplots(1, 2, sharex=True, sharey=True)\n\n# Cumulative distributions.\naxs[0].ecdf(data, label=\"CDF\")\nn, bins, patches = axs[0].hist(data, n_bins, density=True, histtype=\"step\",\n                               cumulative=True, label=\"Cumulative histogram\")\nx = np.linspace(data.min(), data.max())\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (x - mu))**2))\ny = y.cumsum()\ny /= y[-1]\naxs[0].plot(x, y, \"k--\", linewidth=1.5, label=\"Theory\")\n\n# Complementary cumulative distributions.\naxs[1].ecdf(data, complementary=True, label=\"CCDF\")\naxs[1].hist(data, bins=bins, density=True, histtype=\"step\", cumulative=-1,\n            label=\"Reversed cumulative histogram\")\naxs[1].plot(x, 1 - y, \"k--\", linewidth=1.5, label=\"Theory\")\n\n# Label the figure.\nfig.suptitle(\"Cumulative distributions\")\nfor ax in axs:\n    ax.grid(True)\n    ax.legend()\n    ax.set_xlabel(\"Annual rainfall (mm)\")\n    ax.set_ylabel(\"Probability of occurrence\")\n    ax.label_outer()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![累计概率分布](intro_files/figure-pdf/fig-cum_hist-output-1.pdf){#fig-cum_hist fig-pos='H'}\n:::\n:::\n\n\nJupyter Notebook 延续了ipython中的`%run`命令，可以脚本模式运行：\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n%run pyfiles/lunch.py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n推荐的午餐: 披萨\n```\n:::\n:::\n\n\n## 文档与帮助\n\n### `help()` 和`?`\nPython有非常详细的官方[帮助文档](https://docs.python.org/zh-cn/3.13/)，帮助新用户快速的熟悉其用法。\n\n例如，Python有一个内置函数`help()`，可以查看定义的文档，例如对函数`len()`：\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nhelp(len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n\n```\n:::\n:::\n\n\n由于其重要性，Ipython和Jupyter中可以使用`?`作为缩写：\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nlen?\n```\n:::\n\n\n当然，对自定义的对象也是适用的。下面定义的函数，有一段函数的说明文字（docstring）：\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef square(x):\n    \"\"\"\n    Calculates the square of a given number.\n\n    Args:\n        x (int or float): The number to be squared.\n\n    Returns:\n        int or float: The square of the input number.\n    \"\"\"\n    return x**2\n```\n:::\n\n\n如果输入`help()`函数：\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nhelp(square)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function square in module __main__:\n\nsquare(x)\n    Calculates the square of a given number.\n\n    Args:\n        x (int or float): The number to be squared.\n\n    Returns:\n        int or float: The square of the input number.\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_files\\figure-pdf"
    ],
    "filters": []
  }
}