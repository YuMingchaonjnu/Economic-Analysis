# 引言

《基于Python的经济分析与应用》旨在将经济学理论与现代数据分析技术相结合，内容涵盖Python编程基础、数据采集与处理、经济数据分析、可视化展示及实际案例应用。

通过学习，使学生掌握应用Python进行经济数据分析的方法，提高数据处理与决策支持能力，为未来从事数据驱动的经济分析、科学研究或制定经济决策打下坚实基础。

## 内容是关于什么的？

### 经济数据分析

对经济数据进行分析长期以来都是政策制定、投资者、企业和消费者关注的焦点：

- 宏观经济形式分析。如毕马威的[中国经济观察](https://kpmg.com/cn/zh/home/insights/2018/02/china-economic-monitor.html)季度报告等、[中国宏观经济论坛](http://ier.ruc.edu.cn/)发布的[CMF中国宏观经济专题报告](http://ier.ruc.edu.cn/zybg/2a2b6422eeff408bb9df2d0266255c1d.htm)等。
- 美国经济分析局（Bureau of Economic Analysis，BEA）：负责公布美国宏观经济以及行业的统计数据，以及有关美国国内生产总值（GDP）和各个市/镇/乡/村/县和大都市区的数据；
- [数据科学](https://aws.amazon.com/cn/what-is/data-science/)在人工智能时代的广泛应用；
- 数据服务商的重要作用。如[彭博社](https://www.bloombergchina.com/solution/data-content/)、[Wind资讯](https://www.wind.com.cn/portal/zh/Home/index.html)等。

### 数据分析方法

将数据分析方法应用至经济学、金融学和国际贸易等学科的有关主题。主要包括：

- 经济数据分析：如增长、不平等等、通货膨胀等宏观数据；
- 统计分析方法：t检验、方差分析等；
- 线性回归方法
- 蒙特卡洛模拟分析
- 机器学习基础方法
- 投入产出模型；
- 网络分析方法；

### 主要参考书

会用到部分Python有关的内容，如：

- @mckinney2022python， [在线阅读](https://wesmckinney.com/book/)
- @vanderplas2016python， [在线阅读](https://jakevdp.github.io/PythonDataScienceHandbook/)
- [Python Programming for Economics and Finance](https://python-programming.quantecon.org/intro.html)

## 分析工具：Python

我们使用Python作为主要的分析工具。根据[TIOBE Index for August 2025](https://www.tiobe.com/tiobe-index/)，Python是目前最流行的编程语言。

![TIOBE Programming Community Index](images/languages_ranking.png){#fig-python_rank}

### 功能强大，应用广泛

Python广泛应用于机器学习、科学计算等各个领域：

1. 机器学习
2. 数据科学
3. 通讯
4. 网页开发
5. CGI and GUI
6. 自然语言处理
7. 游戏开发
10. 等等

### Python的特点

Python具有许多优点：

1. 易读、易写和易调试；
2. 核心内容易学；
3. 众多库的支持；
4. 初学者友好
5. 支持多平台
6. 网络资源众多

## 安装和设置软件环境

### 下载安装Python

- 自[官方网站](https://www.python.org/downloads/)下载Python，当前版本3.13.x。

- 双击打开下载的安装程序，如果是Windows操作系统，在点击“Install Now”安装程序之前，**注意**勾选：Add Python to PATH，将Python的安装路径添加到操作系统的环境变量Path中，如图 @fig-add_to_path 所示：

![将Python添加至环境](images/ADD_TO_PATH.PNG){#fig-add_to_path}

- 在“命令提示符”输入`python --version`查看安装版本，如图 @fig-python_version 所示。

![Python 版本](images/python_version.PNG){#fig-python_version}

### 安装Jupyer Lab

- 安装[JupyterLab](https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html)。通过命令提示符（或Mac OS的终端）安装：`pip install jupyterlab`。应用过程中经常需要使用pip安装程序，建议将镜像源配置为[清华大学开源软件镜像站](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)。
- 在命令提示符输入:`jupyter lab`，就可以在浏览器启动Jupyter Lab，新建一个Notebook就可以使用了，如 @fig-jupyter_lab 所示 。选中单元格（cell），设置为“code”格式（其他两种是markdown和raw），输入：
```{python}
print("Hello World!")
```

![Jupyter Lab](images/jupyter_lab.PNG){#fig-jupyter_lab}

### 安装Visual Studio Code

Visual Studio Code是由微软推出的免费、开源、跨平台的代码编辑器，支持几十种主流编程语言（如JavaScript、Python、C++、Java、Go 等），并且与微软推出的Copilot人工智能工具高度融合，拥有强大的功能和灵活的扩展性。

- 下载安装[Visual Studio Code ](https://code.visualstudio.com/)。
要将软件设置为中文，可以使用快捷键`Ctrl + Shift + P`打开命令面板，输入`Configure Display Languate`，在出现的列表中，选择“中文（简体）”，根据提示重启VS Code，界面语言就会变为中文。

- 在扩展（Extensions Marketplace）搜索安装插件：
  - Python
  - Jupyter,
  - Excel Viewer
  - Rainbow CSV
  
应用时，Visual Studio Code 可以“打开文件”或者 “打开文件夹”将项目所在文件夹处打开。建议以打开文件夹方式，可以比较清楚的概览代码、数据、图形等子文件夹。
  
### 安装第三方程序包和创建虚拟环境

要安装第三方程序包，基本的方式是通过`pip`命令：

`python -m pip install SomePackage`

例如，在命令提示符，或者在Visual Studio Code使用快捷键`Ctrl + Shift + \` `新建终端，输入命令使用pip安装。：

- Numpy: `python -m pip install numpy`
- Pandas: `python -m pip install pandas`
- Matplotlib: `python -m pip install matplotlib`

建议为单独的项目设置一个Python虚拟环境：

- 创建虚拟环境：在VSC中新建终端，运行：`python -m venv <env_name>`，其中`<env_name>`是你想给虚拟环境其的名称；
- 激活虚拟环境：Windows系统下使用：`<env_name>Scripts/activate`，macOS下使用：`source <env_name>/bin/activate`
- 停用虚拟环境： `deactivate`；

更快捷的方式是通过下载记录有程序包名字的requirements.txt文件进行安装：

`pip install -r requirements.txt`

可以将需要的第三方程序一次安装。

## 脚本模式和交互模式

Python可以交互式或脚本模式运行。

### 交互式

用户输入代码，回车运行。在如IDLE，Ipython都可以方便地进行交互式操作。例如：

  - 在命令提示符（或VSC终端）输入`ipython`，将打开Ipython的界面，输入`3 + 3`，回车，将在屏幕上立刻显示计算结果；
  - 在应用程序中打开 IDLE Shell，也可以方便的进行交互式操作；
  - 在Jupyter Notebook的代码单元格内，输入代码，点击运行显示结果；
  
### 脚本模式

脚本模式是将代码保存在.py格式的文件中，然后使用命令提示符调用脚本。

例如，在文件夹pyfiles中保存有一个文件`lunch.py`，定义了一个随机选择午餐的函数`lunch()`，当运行该函数时，随机从列表中选择一个作为推荐的午餐。
```{python, eval=False}
import random

def lunch():
    """Randomly choose a lunch option and return the result."""
    lunch_list = ["Rice Bowl", "Ramen", "Salad", "Burger", "Dumplings", "Pizza"]
    return random.choice(lunch_list)

if __name__ == "__main__":
    result = lunch()
    print("Recomm:",result)
```

在命令提示符或终端中运行：

`python pyfiles/lunch.py`

当然，也可以先改变当前文件夹至pyfiles文件夹，就可以省略路径。

### 在Visual Studio Code 中 应用 Jupyter notebook

打开VSC，点击“文件- 新建文件”，从弹出的菜单选择“Jupyter Notebook”。

![新建Jupyter Notebook](images/new_notebook.png){#fig-new_notebook}

下面的例子来自[Matplotlib官方网站](https://matplotlib.org/stable/gallery/statistics/histogram_cumulative.html#sphx-glr-gallery-statistics-histogram-cumulative-py)，将代码复制到Notebook的一个单元格中，点击左侧的运行三角箭头（VSC也许会让你选择一个核），绘制 @fig-cum_hist 所示的一个累计概率分布图：

```{python}
#| label: fig-cum_hist
#| fig-cap: "累计概率分布"

import matplotlib.pyplot as plt
import numpy as np

np.random.seed(19680801)

mu = 200
sigma = 25
n_bins = 25
data = np.random.normal(mu, sigma, size=100)

fig = plt.figure(figsize=(9, 4), layout="constrained")
axs = fig.subplots(1, 2, sharex=True, sharey=True)

# Cumulative distributions.
axs[0].ecdf(data, label="CDF")
n, bins, patches = axs[0].hist(data, n_bins, density=True, histtype="step",
                               cumulative=True, label="Cumulative histogram")
x = np.linspace(data.min(), data.max())
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (x - mu))**2))
y = y.cumsum()
y /= y[-1]
axs[0].plot(x, y, "k--", linewidth=1.5, label="Theory")

# Complementary cumulative distributions.
axs[1].ecdf(data, complementary=True, label="CCDF")
axs[1].hist(data, bins=bins, density=True, histtype="step", cumulative=-1,
            label="Reversed cumulative histogram")
axs[1].plot(x, 1 - y, "k--", linewidth=1.5, label="Theory")

# Label the figure.
fig.suptitle("Cumulative distributions")
for ax in axs:
    ax.grid(True)
    ax.legend()
    ax.set_xlabel("Annual rainfall (mm)")
    ax.set_ylabel("Probability of occurrence")
    ax.label_outer()

plt.show()
```

Jupyter Notebook 延续了ipython中的`%run`命令，可以脚本模式运行：
```{python, eval=FALSE}
%run pyfiles/lunch.py
```

## 文档与帮助

### `help()` 和`?`
Python有非常详细的官方[帮助文档](https://docs.python.org/zh-cn/3.13/)，帮助新用户快速的熟悉其用法。

例如，Python有一个内置函数`help()`，可以查看定义的文档，例如对函数`len()`：
```{python}
help(len)
```

由于其重要性，Ipython和Jupyter中可以使用`?`作为缩写：
```{python}
len?
```


当然，对自定义的对象也是适用的。下面定义的函数，有一段函数的说明文字（docstring）：
```{python}
def square(x):
    """
    Calculates the square of a given number.

    Args:
        x (int or float): The number to be squared.

    Returns:
        int or float: The square of the input number.
    """
    return x**2

```

如果输入`help()`函数：

```{python}
help(square)
```

